=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenBanking::BankStatementsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BankStatementsApi' do
  before do
    # run before each test
    @api_instance = OpenBanking::BankStatementsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BankStatementsApi' do
    it 'should create an instance of BankStatementsApi' do
      expect(@api_instance).to be_instance_of(OpenBanking::BankStatementsApi)
    end
  end

  # unit tests for generate_statement_report
  # Generate Statement Report
  # Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
  # @param customer_id A customer ID
  # @param statement_report_constraints 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
  # @return [StatementReportAck]
  describe 'generate_statement_report test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_customer_account_multiple_statement
  # Get Customer Account Multiple Statements
  # This endpoint retrieves account statements for a given customer. The maximum number of statements that can be returned is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
  # @param customer_id A customer ID
  # @param account_id The account ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :index Request statements with comma-separated indexes between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return the sixth most recent statement.
  # @return [CustomerAccountMultipleStatements]
  describe 'get_customer_account_multiple_statement test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_customer_account_statement
  # Get Customer Account Statement
  # Retrieve the customer&#39;s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
  # @param customer_id A customer ID
  # @param account_id The account ID
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :index Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement.
  # @option opts [String] :type The type of statement to retrieve
  # @return [File]
  describe 'get_customer_account_statement test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
