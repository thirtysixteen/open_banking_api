=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Details for investment account holdings
  class CustomerAccountPosition
    # The ID of the investment position
    attr_accessor :id

    # The description of the holding
    attr_accessor :description

    # The investment position's market ticker symbol
    attr_accessor :symbol

    # The number of units of the holding
    attr_accessor :units

    # The current price of the investment holding
    attr_accessor :current_price

    # The security name for the investment holding
    attr_accessor :security_name

    # The transaction type of the holding, such as cash, margin, and more
    attr_accessor :transaction_type

    # Market value of an investment position at the time of retrieval
    attr_accessor :market_value

    # The percent change in value since the previous day
    attr_accessor :change_percent

    # The value amount change since the previous day
    attr_accessor :daily_change

    # The total cost of acquiring the security
    attr_accessor :cost_basis

    # The type of the holding
    attr_accessor :hold_type

    # The security type for the investment holding
    attr_accessor :inv_security_type

    # The status of the holding
    attr_accessor :status

    # A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :current_price_date

    # Type of security for the investment position
    attr_accessor :security_type

    # Type of mutual fund, such as open ended
    attr_accessor :mf_type

    # Fund type assigned by the FI (long or short)
    attr_accessor :pos_type

    # Total gain and loss of the position at the time of aggregation in dollars
    attr_accessor :total_gl_dollar

    # Total gain and loss of the position at the time of aggregation in percentage
    attr_accessor :total_gl_percent

    # The strike price of the option contract
    attr_accessor :option_strike_price

    # The type of option contract (PUT or CALL)
    attr_accessor :option_type

    # The number of shares per option contract
    attr_accessor :option_shares_per_contract

    # Expiration date of option
    attr_accessor :option_expire_date

    # Financial Institution (FI) defined asset class (COMMON STOCK, COMNEQTY, EQUITY/STOCK, CMA-ISA, CONVERTIBLE PREFERREDS, CORPORATE BONDS, OTHER MONEY FUNDS, ALLOCATION FUNDS, CMA-TAXABLE, FOREIGNEQUITYADRS, COMMONSTOCK, PREFERRED STOCKS, STABLE VALUE, FOREIGN EQUITY ADRS)
    attr_accessor :fi_asset_class

    # An asset class is a grouping of comparable financial securities. These include equities (stocks), fixed income (bonds), and cash equivalent or money market instruments. (DOMESTICBOND, LARGESTOCK, INTLSTOCK, MONEYMRKT, OTHER)
    attr_accessor :asset_class

    # Currency rate, ratio of currency to original currency
    attr_accessor :currency_rate

    # The security ID of the transaction
    attr_accessor :security_id

    # The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"
    attr_accessor :security_id_type

    # The per share cost of acquiring the security
    attr_accessor :cost_basis_per_share

    # The subaccount's type, such as cash
    attr_accessor :sub_account_type

    # Symbol for the currency that the account is being converted into
    attr_accessor :security_currency

    # The current day's gain and loss of the position at the time of aggregation in dollars
    attr_accessor :today_gl_dollar

    # The current day's gain and loss of the position at the time of aggregation in percentage
    attr_accessor :today_gl_percent

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'description' => :'description',
        :'symbol' => :'symbol',
        :'units' => :'units',
        :'current_price' => :'currentPrice',
        :'security_name' => :'securityName',
        :'transaction_type' => :'transactionType',
        :'market_value' => :'marketValue',
        :'change_percent' => :'changePercent',
        :'daily_change' => :'dailyChange',
        :'cost_basis' => :'costBasis',
        :'hold_type' => :'holdType',
        :'inv_security_type' => :'invSecurityType',
        :'status' => :'status',
        :'current_price_date' => :'currentPriceDate',
        :'security_type' => :'securityType',
        :'mf_type' => :'mfType',
        :'pos_type' => :'posType',
        :'total_gl_dollar' => :'totalGLDollar',
        :'total_gl_percent' => :'totalGLPercent',
        :'option_strike_price' => :'optionStrikePrice',
        :'option_type' => :'optionType',
        :'option_shares_per_contract' => :'optionSharesPerContract',
        :'option_expire_date' => :'optionExpireDate',
        :'fi_asset_class' => :'fiAssetClass',
        :'asset_class' => :'assetClass',
        :'currency_rate' => :'currencyRate',
        :'security_id' => :'securityId',
        :'security_id_type' => :'securityIdType',
        :'cost_basis_per_share' => :'costBasisPerShare',
        :'sub_account_type' => :'subAccountType',
        :'security_currency' => :'securityCurrency',
        :'today_gl_dollar' => :'todayGLDollar',
        :'today_gl_percent' => :'todayGLPercent'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'description' => :'String',
        :'symbol' => :'String',
        :'units' => :'Float',
        :'current_price' => :'Float',
        :'security_name' => :'String',
        :'transaction_type' => :'String',
        :'market_value' => :'Float',
        :'change_percent' => :'Float',
        :'daily_change' => :'Float',
        :'cost_basis' => :'Float',
        :'hold_type' => :'String',
        :'inv_security_type' => :'String',
        :'status' => :'String',
        :'current_price_date' => :'Integer',
        :'security_type' => :'String',
        :'mf_type' => :'String',
        :'pos_type' => :'String',
        :'total_gl_dollar' => :'Float',
        :'total_gl_percent' => :'Float',
        :'option_strike_price' => :'Float',
        :'option_type' => :'String',
        :'option_shares_per_contract' => :'Float',
        :'option_expire_date' => :'Date',
        :'fi_asset_class' => :'String',
        :'asset_class' => :'String',
        :'currency_rate' => :'Float',
        :'security_id' => :'String',
        :'security_id_type' => :'String',
        :'cost_basis_per_share' => :'Float',
        :'sub_account_type' => :'String',
        :'security_currency' => :'String',
        :'today_gl_dollar' => :'Float',
        :'today_gl_percent' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::CustomerAccountPosition` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::CustomerAccountPosition`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'symbol')
        self.symbol = attributes[:'symbol']
      end

      if attributes.key?(:'units')
        self.units = attributes[:'units']
      end

      if attributes.key?(:'current_price')
        self.current_price = attributes[:'current_price']
      end

      if attributes.key?(:'security_name')
        self.security_name = attributes[:'security_name']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'market_value')
        self.market_value = attributes[:'market_value']
      end

      if attributes.key?(:'change_percent')
        self.change_percent = attributes[:'change_percent']
      end

      if attributes.key?(:'daily_change')
        self.daily_change = attributes[:'daily_change']
      end

      if attributes.key?(:'cost_basis')
        self.cost_basis = attributes[:'cost_basis']
      end

      if attributes.key?(:'hold_type')
        self.hold_type = attributes[:'hold_type']
      end

      if attributes.key?(:'inv_security_type')
        self.inv_security_type = attributes[:'inv_security_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'current_price_date')
        self.current_price_date = attributes[:'current_price_date']
      end

      if attributes.key?(:'security_type')
        self.security_type = attributes[:'security_type']
      end

      if attributes.key?(:'mf_type')
        self.mf_type = attributes[:'mf_type']
      end

      if attributes.key?(:'pos_type')
        self.pos_type = attributes[:'pos_type']
      end

      if attributes.key?(:'total_gl_dollar')
        self.total_gl_dollar = attributes[:'total_gl_dollar']
      end

      if attributes.key?(:'total_gl_percent')
        self.total_gl_percent = attributes[:'total_gl_percent']
      end

      if attributes.key?(:'option_strike_price')
        self.option_strike_price = attributes[:'option_strike_price']
      end

      if attributes.key?(:'option_type')
        self.option_type = attributes[:'option_type']
      end

      if attributes.key?(:'option_shares_per_contract')
        self.option_shares_per_contract = attributes[:'option_shares_per_contract']
      end

      if attributes.key?(:'option_expire_date')
        self.option_expire_date = attributes[:'option_expire_date']
      end

      if attributes.key?(:'fi_asset_class')
        self.fi_asset_class = attributes[:'fi_asset_class']
      end

      if attributes.key?(:'asset_class')
        self.asset_class = attributes[:'asset_class']
      end

      if attributes.key?(:'currency_rate')
        self.currency_rate = attributes[:'currency_rate']
      end

      if attributes.key?(:'security_id')
        self.security_id = attributes[:'security_id']
      end

      if attributes.key?(:'security_id_type')
        self.security_id_type = attributes[:'security_id_type']
      end

      if attributes.key?(:'cost_basis_per_share')
        self.cost_basis_per_share = attributes[:'cost_basis_per_share']
      end

      if attributes.key?(:'sub_account_type')
        self.sub_account_type = attributes[:'sub_account_type']
      end

      if attributes.key?(:'security_currency')
        self.security_currency = attributes[:'security_currency']
      end

      if attributes.key?(:'today_gl_dollar')
        self.today_gl_dollar = attributes[:'today_gl_dollar']
      end

      if attributes.key?(:'today_gl_percent')
        self.today_gl_percent = attributes[:'today_gl_percent']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          description == o.description &&
          symbol == o.symbol &&
          units == o.units &&
          current_price == o.current_price &&
          security_name == o.security_name &&
          transaction_type == o.transaction_type &&
          market_value == o.market_value &&
          change_percent == o.change_percent &&
          daily_change == o.daily_change &&
          cost_basis == o.cost_basis &&
          hold_type == o.hold_type &&
          inv_security_type == o.inv_security_type &&
          status == o.status &&
          current_price_date == o.current_price_date &&
          security_type == o.security_type &&
          mf_type == o.mf_type &&
          pos_type == o.pos_type &&
          total_gl_dollar == o.total_gl_dollar &&
          total_gl_percent == o.total_gl_percent &&
          option_strike_price == o.option_strike_price &&
          option_type == o.option_type &&
          option_shares_per_contract == o.option_shares_per_contract &&
          option_expire_date == o.option_expire_date &&
          fi_asset_class == o.fi_asset_class &&
          asset_class == o.asset_class &&
          currency_rate == o.currency_rate &&
          security_id == o.security_id &&
          security_id_type == o.security_id_type &&
          cost_basis_per_share == o.cost_basis_per_share &&
          sub_account_type == o.sub_account_type &&
          security_currency == o.security_currency &&
          today_gl_dollar == o.today_gl_dollar &&
          today_gl_percent == o.today_gl_percent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, description, symbol, units, current_price, security_name, transaction_type, market_value, change_percent, daily_change, cost_basis, hold_type, inv_security_type, status, current_price_date, security_type, mf_type, pos_type, total_gl_dollar, total_gl_percent, option_strike_price, option_type, option_shares_per_contract, option_expire_date, fi_asset_class, asset_class, currency_rate, security_id, security_id_type, cost_basis_per_share, sub_account_type, security_currency, today_gl_dollar, today_gl_percent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
