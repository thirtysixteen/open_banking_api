=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Details about the business the report is generated for and metadata about the report
  class ObbReportHeader
    # Business address line 1
    attr_accessor :business_address

    # Business address city
    attr_accessor :business_city

    # Name of the business
    attr_accessor :business_name

    # Business address state
    attr_accessor :business_state

    # Business address zip
    attr_accessor :business_zip

    # Partner-provided reference number
    attr_accessor :reference_number

    # Date the report was requested
    attr_accessor :report_date

    # Generated unique report ID
    attr_accessor :report_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'business_address' => :'businessAddress',
        :'business_city' => :'businessCity',
        :'business_name' => :'businessName',
        :'business_state' => :'businessState',
        :'business_zip' => :'businessZip',
        :'reference_number' => :'referenceNumber',
        :'report_date' => :'reportDate',
        :'report_id' => :'reportId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'business_address' => :'String',
        :'business_city' => :'String',
        :'business_name' => :'String',
        :'business_state' => :'String',
        :'business_zip' => :'String',
        :'reference_number' => :'String',
        :'report_date' => :'String',
        :'report_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::ObbReportHeader` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::ObbReportHeader`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'business_address')
        self.business_address = attributes[:'business_address']
      end

      if attributes.key?(:'business_city')
        self.business_city = attributes[:'business_city']
      end

      if attributes.key?(:'business_name')
        self.business_name = attributes[:'business_name']
      end

      if attributes.key?(:'business_state')
        self.business_state = attributes[:'business_state']
      end

      if attributes.key?(:'business_zip')
        self.business_zip = attributes[:'business_zip']
      end

      if attributes.key?(:'reference_number')
        self.reference_number = attributes[:'reference_number']
      end

      if attributes.key?(:'report_date')
        self.report_date = attributes[:'report_date']
      else
        self.report_date = nil
      end

      if attributes.key?(:'report_id')
        self.report_id = attributes[:'report_id']
      else
        self.report_id = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@business_address.nil? && @business_address.to_s.length > 255
        invalid_properties.push('invalid value for "business_address", the character length must be smaller than or equal to 255.')
      end

      if !@business_address.nil? && @business_address.to_s.length < 0
        invalid_properties.push('invalid value for "business_address", the character length must be great than or equal to 0.')
      end

      if !@business_city.nil? && @business_city.to_s.length > 255
        invalid_properties.push('invalid value for "business_city", the character length must be smaller than or equal to 255.')
      end

      if !@business_city.nil? && @business_city.to_s.length < 0
        invalid_properties.push('invalid value for "business_city", the character length must be great than or equal to 0.')
      end

      if !@business_name.nil? && @business_name.to_s.length > 255
        invalid_properties.push('invalid value for "business_name", the character length must be smaller than or equal to 255.')
      end

      if !@business_name.nil? && @business_name.to_s.length < 0
        invalid_properties.push('invalid value for "business_name", the character length must be great than or equal to 0.')
      end

      if !@business_state.nil? && @business_state.to_s.length > 255
        invalid_properties.push('invalid value for "business_state", the character length must be smaller than or equal to 255.')
      end

      if !@business_state.nil? && @business_state.to_s.length < 0
        invalid_properties.push('invalid value for "business_state", the character length must be great than or equal to 0.')
      end

      if !@business_zip.nil? && @business_zip.to_s.length > 255
        invalid_properties.push('invalid value for "business_zip", the character length must be smaller than or equal to 255.')
      end

      if !@business_zip.nil? && @business_zip.to_s.length < 0
        invalid_properties.push('invalid value for "business_zip", the character length must be great than or equal to 0.')
      end

      if !@reference_number.nil? && @reference_number.to_s.length > 255
        invalid_properties.push('invalid value for "reference_number", the character length must be smaller than or equal to 255.')
      end

      if !@reference_number.nil? && @reference_number.to_s.length < 0
        invalid_properties.push('invalid value for "reference_number", the character length must be great than or equal to 0.')
      end

      if @report_date.nil?
        invalid_properties.push('invalid value for "report_date", report_date cannot be nil.')
      end

      if @report_date.to_s.length > 25
        invalid_properties.push('invalid value for "report_date", the character length must be smaller than or equal to 25.')
      end

      if @report_date.to_s.length < 25
        invalid_properties.push('invalid value for "report_date", the character length must be great than or equal to 25.')
      end

      if @report_id.nil?
        invalid_properties.push('invalid value for "report_id", report_id cannot be nil.')
      end

      if @report_id.to_s.length > 255
        invalid_properties.push('invalid value for "report_id", the character length must be smaller than or equal to 255.')
      end

      if @report_id.to_s.length < 0
        invalid_properties.push('invalid value for "report_id", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@business_address.nil? && @business_address.to_s.length > 255
      return false if !@business_address.nil? && @business_address.to_s.length < 0
      return false if !@business_city.nil? && @business_city.to_s.length > 255
      return false if !@business_city.nil? && @business_city.to_s.length < 0
      return false if !@business_name.nil? && @business_name.to_s.length > 255
      return false if !@business_name.nil? && @business_name.to_s.length < 0
      return false if !@business_state.nil? && @business_state.to_s.length > 255
      return false if !@business_state.nil? && @business_state.to_s.length < 0
      return false if !@business_zip.nil? && @business_zip.to_s.length > 255
      return false if !@business_zip.nil? && @business_zip.to_s.length < 0
      return false if !@reference_number.nil? && @reference_number.to_s.length > 255
      return false if !@reference_number.nil? && @reference_number.to_s.length < 0
      return false if @report_date.nil?
      return false if @report_date.to_s.length > 25
      return false if @report_date.to_s.length < 25
      return false if @report_id.nil?
      return false if @report_id.to_s.length > 255
      return false if @report_id.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] business_address Value to be assigned
    def business_address=(business_address)
      if business_address.nil?
        fail ArgumentError, 'business_address cannot be nil'
      end

      if business_address.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_address", the character length must be smaller than or equal to 255.'
      end

      if business_address.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_address", the character length must be great than or equal to 0.'
      end

      @business_address = business_address
    end

    # Custom attribute writer method with validation
    # @param [Object] business_city Value to be assigned
    def business_city=(business_city)
      if business_city.nil?
        fail ArgumentError, 'business_city cannot be nil'
      end

      if business_city.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_city", the character length must be smaller than or equal to 255.'
      end

      if business_city.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_city", the character length must be great than or equal to 0.'
      end

      @business_city = business_city
    end

    # Custom attribute writer method with validation
    # @param [Object] business_name Value to be assigned
    def business_name=(business_name)
      if business_name.nil?
        fail ArgumentError, 'business_name cannot be nil'
      end

      if business_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_name", the character length must be smaller than or equal to 255.'
      end

      if business_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_name", the character length must be great than or equal to 0.'
      end

      @business_name = business_name
    end

    # Custom attribute writer method with validation
    # @param [Object] business_state Value to be assigned
    def business_state=(business_state)
      if business_state.nil?
        fail ArgumentError, 'business_state cannot be nil'
      end

      if business_state.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_state", the character length must be smaller than or equal to 255.'
      end

      if business_state.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_state", the character length must be great than or equal to 0.'
      end

      @business_state = business_state
    end

    # Custom attribute writer method with validation
    # @param [Object] business_zip Value to be assigned
    def business_zip=(business_zip)
      if business_zip.nil?
        fail ArgumentError, 'business_zip cannot be nil'
      end

      if business_zip.to_s.length > 255
        fail ArgumentError, 'invalid value for "business_zip", the character length must be smaller than or equal to 255.'
      end

      if business_zip.to_s.length < 0
        fail ArgumentError, 'invalid value for "business_zip", the character length must be great than or equal to 0.'
      end

      @business_zip = business_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_number Value to be assigned
    def reference_number=(reference_number)
      if reference_number.nil?
        fail ArgumentError, 'reference_number cannot be nil'
      end

      if reference_number.to_s.length > 255
        fail ArgumentError, 'invalid value for "reference_number", the character length must be smaller than or equal to 255.'
      end

      if reference_number.to_s.length < 0
        fail ArgumentError, 'invalid value for "reference_number", the character length must be great than or equal to 0.'
      end

      @reference_number = reference_number
    end

    # Custom attribute writer method with validation
    # @param [Object] report_date Value to be assigned
    def report_date=(report_date)
      if report_date.nil?
        fail ArgumentError, 'report_date cannot be nil'
      end

      if report_date.to_s.length > 25
        fail ArgumentError, 'invalid value for "report_date", the character length must be smaller than or equal to 25.'
      end

      if report_date.to_s.length < 25
        fail ArgumentError, 'invalid value for "report_date", the character length must be great than or equal to 25.'
      end

      @report_date = report_date
    end

    # Custom attribute writer method with validation
    # @param [Object] report_id Value to be assigned
    def report_id=(report_id)
      if report_id.nil?
        fail ArgumentError, 'report_id cannot be nil'
      end

      if report_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "report_id", the character length must be smaller than or equal to 255.'
      end

      if report_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "report_id", the character length must be great than or equal to 0.'
      end

      @report_id = report_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          business_address == o.business_address &&
          business_city == o.business_city &&
          business_name == o.business_name &&
          business_state == o.business_state &&
          business_zip == o.business_zip &&
          reference_number == o.reference_number &&
          report_date == o.report_date &&
          report_id == o.report_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [business_address, business_city, business_name, business_state, business_zip, reference_number, report_date, report_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
