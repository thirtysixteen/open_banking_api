=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Response given when analytics were generated successfully, providing the caller with a report ID which can be used to retrieve the report as JSON or a PDF.
  class ObbAnalyticsReportAck
    # List of account IDs included in the report
    attr_accessor :account_ids

    # Business ID associated with the requested customer
    attr_accessor :business_id

    # Created date of balance analytics request
    attr_accessor :created_date

    # A customer ID represented as a number. See Add Customer API for how to create a customer ID.
    attr_accessor :customer_id

    # A report ID
    attr_accessor :report_id

    # PIN that may be used to access the report
    attr_accessor :report_pin

    # Name of requester
    attr_accessor :requester_name

    # Title of the report
    attr_accessor :title

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_ids' => :'accountIds',
        :'business_id' => :'businessId',
        :'created_date' => :'createdDate',
        :'customer_id' => :'customerId',
        :'report_id' => :'reportId',
        :'report_pin' => :'reportPin',
        :'requester_name' => :'requesterName',
        :'title' => :'title'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_ids' => :'Array<Integer>',
        :'business_id' => :'Integer',
        :'created_date' => :'String',
        :'customer_id' => :'Integer',
        :'report_id' => :'String',
        :'report_pin' => :'String',
        :'requester_name' => :'String',
        :'title' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::ObbAnalyticsReportAck` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::ObbAnalyticsReportAck`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_ids')
        if (value = attributes[:'account_ids']).is_a?(Array)
          self.account_ids = value
        end
      else
        self.account_ids = nil
      end

      if attributes.key?(:'business_id')
        self.business_id = attributes[:'business_id']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      else
        self.created_date = nil
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      else
        self.customer_id = nil
      end

      if attributes.key?(:'report_id')
        self.report_id = attributes[:'report_id']
      else
        self.report_id = nil
      end

      if attributes.key?(:'report_pin')
        self.report_pin = attributes[:'report_pin']
      else
        self.report_pin = nil
      end

      if attributes.key?(:'requester_name')
        self.requester_name = attributes[:'requester_name']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_ids.nil?
        invalid_properties.push('invalid value for "account_ids", account_ids cannot be nil.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      if @created_date.to_s.length > 25
        invalid_properties.push('invalid value for "created_date", the character length must be smaller than or equal to 25.')
      end

      if @created_date.to_s.length < 25
        invalid_properties.push('invalid value for "created_date", the character length must be great than or equal to 25.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      if @report_id.nil?
        invalid_properties.push('invalid value for "report_id", report_id cannot be nil.')
      end

      if @report_pin.nil?
        invalid_properties.push('invalid value for "report_pin", report_pin cannot be nil.')
      end

      if @report_pin.to_s.length > 50
        invalid_properties.push('invalid value for "report_pin", the character length must be smaller than or equal to 50.')
      end

      if @report_pin.to_s.length < 0
        invalid_properties.push('invalid value for "report_pin", the character length must be great than or equal to 0.')
      end

      if !@requester_name.nil? && @requester_name.to_s.length > 255
        invalid_properties.push('invalid value for "requester_name", the character length must be smaller than or equal to 255.')
      end

      if !@requester_name.nil? && @requester_name.to_s.length < 0
        invalid_properties.push('invalid value for "requester_name", the character length must be great than or equal to 0.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_ids.nil?
      return false if @created_date.nil?
      return false if @created_date.to_s.length > 25
      return false if @created_date.to_s.length < 25
      return false if @customer_id.nil?
      return false if @report_id.nil?
      return false if @report_pin.nil?
      return false if @report_pin.to_s.length > 50
      return false if @report_pin.to_s.length < 0
      return false if !@requester_name.nil? && @requester_name.to_s.length > 255
      return false if !@requester_name.nil? && @requester_name.to_s.length < 0
      return false if @title.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] created_date Value to be assigned
    def created_date=(created_date)
      if created_date.nil?
        fail ArgumentError, 'created_date cannot be nil'
      end

      if created_date.to_s.length > 25
        fail ArgumentError, 'invalid value for "created_date", the character length must be smaller than or equal to 25.'
      end

      if created_date.to_s.length < 25
        fail ArgumentError, 'invalid value for "created_date", the character length must be great than or equal to 25.'
      end

      @created_date = created_date
    end

    # Custom attribute writer method with validation
    # @param [Object] report_pin Value to be assigned
    def report_pin=(report_pin)
      if report_pin.nil?
        fail ArgumentError, 'report_pin cannot be nil'
      end

      if report_pin.to_s.length > 50
        fail ArgumentError, 'invalid value for "report_pin", the character length must be smaller than or equal to 50.'
      end

      if report_pin.to_s.length < 0
        fail ArgumentError, 'invalid value for "report_pin", the character length must be great than or equal to 0.'
      end

      @report_pin = report_pin
    end

    # Custom attribute writer method with validation
    # @param [Object] requester_name Value to be assigned
    def requester_name=(requester_name)
      if requester_name.nil?
        fail ArgumentError, 'requester_name cannot be nil'
      end

      if requester_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "requester_name", the character length must be smaller than or equal to 255.'
      end

      if requester_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "requester_name", the character length must be great than or equal to 0.'
      end

      @requester_name = requester_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_ids == o.account_ids &&
          business_id == o.business_id &&
          created_date == o.created_date &&
          customer_id == o.customer_id &&
          report_id == o.report_id &&
          report_pin == o.report_pin &&
          requester_name == o.requester_name &&
          title == o.title
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_ids, business_id, created_date, customer_id, report_id, report_pin, requester_name, title].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
