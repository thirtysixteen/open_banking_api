=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class ConnectParameters
    # By default, the Connect application is in English. You don't need to pass this parameter unless you want to translate Connect into one of our supported languages.  * Spanish (United States): `es` * French (Canada): `fr` 
    attr_accessor :language

    # Your Partner ID displayed in the [Developer Dashboard](https://developer.mastercard.com/account/log-in)
    attr_accessor :partner_id

    # A customer ID. See Add Customer API for how to create a customer ID.
    attr_accessor :customer_id

    # A consumer ID. See Create Consumer API for how to create a consumer ID.
    attr_accessor :consumer_id

    # The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe).
    attr_accessor :redirect_uri

    # The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.
    attr_accessor :webhook

    # The content type the webhook events will be sent in. Supported types: \"application/json\" and \"application/xml\".
    attr_accessor :webhook_content_type

    # Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).
    attr_accessor :webhook_data

    # Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).
    attr_accessor :webhook_headers

    attr_accessor :optional_consumer_info

    # \"true\": The URL link expires after a Connect session successfully completes.  Note: when the `singleUseUrl` and the `experience` parameters are passed in the same call, the `singleUseUrl` value overrides the `singleUseUrl` value configured in the `experience` parameter.
    attr_accessor :single_use_url

    # The `experience` field allows you to customize: * Brand: color and logo * Icon: displayed on the \"Share your data\" page * Popular institutions: displayed on the Bank Search page * Report: the credit decisioning report to send when Connect completes. * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company. For each additional experience you create thereafter, they'll give you a unique ID. See [Configure the Connect Experience](https://developer.mastercard.com/open-banking-us/documentation/connect/configure-connect-experience/).  Experience values options: * \"default\": your default experience (must be defined) * GUID: the code for a different experience * Not defined: If you don't pass the experience parameter, then Connect's out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.
    attr_accessor :experience

    # Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/).
    attr_accessor :institution_settings

    # The `fromDate` parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it's greater than 10 digits, then the `fromDate` is set to the credit decisioning report's default `fromDate`.  For an experience that generates multiple reports, the `fromDate` gets passed to the reports that support it.  However, Connect doesn't pass this parameter to the following reports: * Pay Statement Extraction Report * VOIE - Paystub (with TXVerify) Report * Statement Report * Verification of Income Report * VOIE - Payroll Report  Note: this field isn't used if you're only collecting transaction data without a report.
    attr_accessor :from_date

    # The `reportCustomFields` parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you'd like associated with the report when it's generated. Every custom field consists of three variables: `label`, `value`, and `shown`. The `shown` variable is \"true\" or \"false\". * \"true\": (default) display the custom field in the PDF report * \"false\": don't display the custom field in the PDF report  For an experience that generates multiple reports, the `reportCustomFields` parameter gets passed to all reports.  All custom fields display in the Reseller Billing API.
    attr_accessor :report_custom_fields

    # \"true\": Indicates that the Connect Session will be displayed within a WebView. When the `isWebView` parameter is `true` the `redirectUri` parameter is required.  Note: This parameter is no longer recommended. We instead recommend specifying a `redirectUrl` through our WebSDK. Please refer to the following documentation:  - [iOS](https://developer.mastercard.com/open-banking-us/documentation/connect/integrating/webviews/ios-webviews/)  - [Android](https://developer.mastercard.com/open-banking-us/documentation/connect/integrating/webviews/android-webviews/)
    attr_accessor :is_web_view

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'language' => :'language',
        :'partner_id' => :'partnerId',
        :'customer_id' => :'customerId',
        :'consumer_id' => :'consumerId',
        :'redirect_uri' => :'redirectUri',
        :'webhook' => :'webhook',
        :'webhook_content_type' => :'webhookContentType',
        :'webhook_data' => :'webhookData',
        :'webhook_headers' => :'webhookHeaders',
        :'optional_consumer_info' => :'optionalConsumerInfo',
        :'single_use_url' => :'singleUseUrl',
        :'experience' => :'experience',
        :'institution_settings' => :'institutionSettings',
        :'from_date' => :'fromDate',
        :'report_custom_fields' => :'reportCustomFields',
        :'is_web_view' => :'isWebView'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'language' => :'String',
        :'partner_id' => :'String',
        :'customer_id' => :'String',
        :'consumer_id' => :'String',
        :'redirect_uri' => :'String',
        :'webhook' => :'String',
        :'webhook_content_type' => :'String',
        :'webhook_data' => :'Object',
        :'webhook_headers' => :'Object',
        :'optional_consumer_info' => :'ConsumerInfo',
        :'single_use_url' => :'Boolean',
        :'experience' => :'String',
        :'institution_settings' => :'Object',
        :'from_date' => :'Integer',
        :'report_custom_fields' => :'Array<ReportCustomField>',
        :'is_web_view' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::ConnectParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::ConnectParameters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'partner_id')
        self.partner_id = attributes[:'partner_id']
      else
        self.partner_id = nil
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      else
        self.customer_id = nil
      end

      if attributes.key?(:'consumer_id')
        self.consumer_id = attributes[:'consumer_id']
      end

      if attributes.key?(:'redirect_uri')
        self.redirect_uri = attributes[:'redirect_uri']
      end

      if attributes.key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end

      if attributes.key?(:'webhook_content_type')
        self.webhook_content_type = attributes[:'webhook_content_type']
      else
        self.webhook_content_type = 'application/json'
      end

      if attributes.key?(:'webhook_data')
        self.webhook_data = attributes[:'webhook_data']
      end

      if attributes.key?(:'webhook_headers')
        self.webhook_headers = attributes[:'webhook_headers']
      end

      if attributes.key?(:'optional_consumer_info')
        self.optional_consumer_info = attributes[:'optional_consumer_info']
      end

      if attributes.key?(:'single_use_url')
        self.single_use_url = attributes[:'single_use_url']
      end

      if attributes.key?(:'experience')
        self.experience = attributes[:'experience']
      end

      if attributes.key?(:'institution_settings')
        self.institution_settings = attributes[:'institution_settings']
      end

      if attributes.key?(:'from_date')
        self.from_date = attributes[:'from_date']
      end

      if attributes.key?(:'report_custom_fields')
        if (value = attributes[:'report_custom_fields']).is_a?(Array)
          self.report_custom_fields = value
        end
      end

      if attributes.key?(:'is_web_view')
        self.is_web_view = attributes[:'is_web_view']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @partner_id.nil?
        invalid_properties.push('invalid value for "partner_id", partner_id cannot be nil.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @partner_id.nil?
      return false if @customer_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          language == o.language &&
          partner_id == o.partner_id &&
          customer_id == o.customer_id &&
          consumer_id == o.consumer_id &&
          redirect_uri == o.redirect_uri &&
          webhook == o.webhook &&
          webhook_content_type == o.webhook_content_type &&
          webhook_data == o.webhook_data &&
          webhook_headers == o.webhook_headers &&
          optional_consumer_info == o.optional_consumer_info &&
          single_use_url == o.single_use_url &&
          experience == o.experience &&
          institution_settings == o.institution_settings &&
          from_date == o.from_date &&
          report_custom_fields == o.report_custom_fields &&
          is_web_view == o.is_web_view
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [language, partner_id, customer_id, consumer_id, redirect_uri, webhook, webhook_content_type, webhook_data, webhook_headers, optional_consumer_info, single_use_url, experience, institution_settings, from_date, report_custom_fields, is_web_view].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
