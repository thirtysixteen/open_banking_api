=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class Business
    # The legal name of the business
    attr_accessor :name

    # Indicates whether a business owner is personally liable for a loan
    attr_accessor :personally_liable

    attr_accessor :address

    attr_accessor :phone_number

    # A URL for the business website
    attr_accessor :url

    # An email address
    attr_accessor :email

    # The business type eg LLC, Corp, S Corp, C Corp, B Corp, Sole Propriertorship, Nonprofit, etc.
    attr_accessor :type

    # Provide details of the tax id for the business
    attr_accessor :tax_id

    # Unique identifier of the business
    attr_accessor :business_id

    # A date-time without time zone
    attr_accessor :created_date

    # A date-time without time zone
    attr_accessor :modified_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'personally_liable' => :'personallyLiable',
        :'address' => :'address',
        :'phone_number' => :'phoneNumber',
        :'url' => :'url',
        :'email' => :'email',
        :'type' => :'type',
        :'tax_id' => :'taxId',
        :'business_id' => :'businessId',
        :'created_date' => :'createdDate',
        :'modified_date' => :'modifiedDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'personally_liable' => :'Boolean',
        :'address' => :'NewAddress',
        :'phone_number' => :'PhoneNumberFormat',
        :'url' => :'String',
        :'email' => :'String',
        :'type' => :'String',
        :'tax_id' => :'String',
        :'business_id' => :'String',
        :'created_date' => :'String',
        :'modified_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'NewBusiness'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::Business` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::Business`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'personally_liable')
        self.personally_liable = attributes[:'personally_liable']
      else
        self.personally_liable = nil
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      else
        self.address = nil
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      else
        self.phone_number = nil
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'tax_id')
        self.tax_id = attributes[:'tax_id']
      end

      if attributes.key?(:'business_id')
        self.business_id = attributes[:'business_id']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      end

      if attributes.key?(:'modified_date')
        self.modified_date = attributes[:'modified_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 150
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 150.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @personally_liable.nil?
        invalid_properties.push('invalid value for "personally_liable", personally_liable cannot be nil.')
      end

      if @address.nil?
        invalid_properties.push('invalid value for "address", address cannot be nil.')
      end

      if @phone_number.nil?
        invalid_properties.push('invalid value for "phone_number", phone_number cannot be nil.')
      end

      if !@url.nil? && @url.to_s.length > 2000
        invalid_properties.push('invalid value for "url", the character length must be smaller than or equal to 2000.')
      end

      if !@url.nil? && @url.to_s.length < 0
        invalid_properties.push('invalid value for "url", the character length must be great than or equal to 0.')
      end

      if !@type.nil? && @type.to_s.length > 150
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 150.')
      end

      if !@type.nil? && @type.to_s.length < 0
        invalid_properties.push('invalid value for "type", the character length must be great than or equal to 0.')
      end

      if !@tax_id.nil? && @tax_id.to_s.length > 15
        invalid_properties.push('invalid value for "tax_id", the character length must be smaller than or equal to 15.')
      end

      if !@tax_id.nil? && @tax_id.to_s.length < 9
        invalid_properties.push('invalid value for "tax_id", the character length must be great than or equal to 9.')
      end

      if !@business_id.nil? && @business_id.to_s.length > 50
        invalid_properties.push('invalid value for "business_id", the character length must be smaller than or equal to 50.')
      end

      if !@business_id.nil? && @business_id.to_s.length < 1
        invalid_properties.push('invalid value for "business_id", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @name.to_s.length > 150
      return false if @name.to_s.length < 1
      return false if @personally_liable.nil?
      return false if @address.nil?
      return false if @phone_number.nil?
      return false if !@url.nil? && @url.to_s.length > 2000
      return false if !@url.nil? && @url.to_s.length < 0
      return false if !@type.nil? && @type.to_s.length > 150
      return false if !@type.nil? && @type.to_s.length < 0
      return false if !@tax_id.nil? && @tax_id.to_s.length > 15
      return false if !@tax_id.nil? && @tax_id.to_s.length < 9
      return false if !@business_id.nil? && @business_id.to_s.length > 50
      return false if !@business_id.nil? && @business_id.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 150
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 150.'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.nil?
        fail ArgumentError, 'url cannot be nil'
      end

      if url.to_s.length > 2000
        fail ArgumentError, 'invalid value for "url", the character length must be smaller than or equal to 2000.'
      end

      if url.to_s.length < 0
        fail ArgumentError, 'invalid value for "url", the character length must be great than or equal to 0.'
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if type.nil?
        fail ArgumentError, 'type cannot be nil'
      end

      if type.to_s.length > 150
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 150.'
      end

      if type.to_s.length < 0
        fail ArgumentError, 'invalid value for "type", the character length must be great than or equal to 0.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_id Value to be assigned
    def tax_id=(tax_id)
      if tax_id.nil?
        fail ArgumentError, 'tax_id cannot be nil'
      end

      if tax_id.to_s.length > 15
        fail ArgumentError, 'invalid value for "tax_id", the character length must be smaller than or equal to 15.'
      end

      if tax_id.to_s.length < 9
        fail ArgumentError, 'invalid value for "tax_id", the character length must be great than or equal to 9.'
      end

      @tax_id = tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] business_id Value to be assigned
    def business_id=(business_id)
      if business_id.nil?
        fail ArgumentError, 'business_id cannot be nil'
      end

      if business_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "business_id", the character length must be smaller than or equal to 50.'
      end

      if business_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "business_id", the character length must be great than or equal to 1.'
      end

      @business_id = business_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          personally_liable == o.personally_liable &&
          address == o.address &&
          phone_number == o.phone_number &&
          url == o.url &&
          email == o.email &&
          type == o.type &&
          tax_id == o.tax_id &&
          business_id == o.business_id &&
          created_date == o.created_date &&
          modified_date == o.modified_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, personally_liable, address, phone_number, url, email, type, tax_id, business_id, created_date, modified_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
