=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Additional customer account details. Not all data points will return for each account type. You can see the account type that each data point will return for in descriptions. The data point are also subject to availability by the institution.
  class CustomerAccountDetail
    # (All Account Types) Most recent date of the following information. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :date_as_of

    # (Checking/Savings/CD/MoneyMarket) and (Mortgage/Loan) The available balance (typically the current balance with adjustments for any pending transactions)
    attr_accessor :available_balance_amount

    # (Checking/Savings/CD/MoneyMarket) Date when account was opened. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :open_date

    # (Checking/Savings/CD/MoneyMarket) Start date of period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :period_start_date

    # End date of period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :period_end_date

    # (Checking/Savings/CD/MoneyMarket) The APY for the current period interest rate
    attr_accessor :period_interest_rate

    # (Checking/Savings/CD/MoneyMarket) Amount deposited in period
    attr_accessor :period_deposit_amount

    # (Checking/Savings/CD/MoneyMarket) Interest accrued during the current period
    attr_accessor :period_interest_amount

    # (Checking/Savings/CD/MoneyMarket) Interest accrued year-to-date
    attr_accessor :interest_ytd_amount

    # (Checking/Savings/CD/MoneyMarket) Interest earned in prior year
    attr_accessor :interest_prior_ytd_amount

    # (Checking/Savings/CD/MoneyMarket) Maturity date of account type. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :maturity_date

    # (Credit Card/Line Of Credit) and (Mortgage/Loan) The account's current interest rate
    attr_accessor :interest_rate

    # (Credit Card/Line Of Credit) The available credit (typically the credit limit minus the current balance)
    attr_accessor :credit_available_amount

    # (Credit Card/Line Of Credit) The account's credit limit
    attr_accessor :credit_max_amount

    # (Credit Card/Line Of Credit) Currently available cash advance
    attr_accessor :cash_advance_available_amount

    # (Credit Card/Line Of Credit) Maximum cash advance amount
    attr_accessor :cash_advance_max_amount

    # (Credit Card/Line Of Credit) Balance of current cash advance
    attr_accessor :cash_advance_balance

    # (Credit Card/Line Of Credit) Interest rate for cash advances
    attr_accessor :cash_advance_interest_rate

    # (Credit Card/Line Of Credit) and (Investment) Current balance
    attr_accessor :current_balance

    # (Credit Card/Line Of Credit) and (Mortgage/Loan) Minimum payment due
    attr_accessor :payment_min_amount

    # (Credit Card/Line Of Credit) Due date for the next payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :payment_due_date

    # (Credit Card/Line Of Credit) Prior balance in last statement
    attr_accessor :previous_balance

    # (Credit Card/Line Of Credit) Start date of statement period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :statement_start_date

    # (Credit Card/Line Of Credit) End date of statement period. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :statement_end_date

    # (Credit Card/Line Of Credit) Purchase amount of statement period
    attr_accessor :statement_purchase_amount

    # (Credit Card/Line Of Credit) Finance amount of statement period
    attr_accessor :statement_finance_amount

    # (Credit Card/Line Of Credit) Credit amount applied in statement period
    attr_accessor :statement_credit_amount

    # (Credit Card/Line Of Credit) Earned reward balance
    attr_accessor :reward_earned_balance

    # (Credit Card/Line Of Credit) Balance past due
    attr_accessor :past_due_amount

    # (Credit Card/Line Of Credit) and (Mortgage/Loan) The amount received in the last payment
    attr_accessor :last_payment_amount

    # (Credit Card/Line Of Credit) The date of the last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :last_payment_date

    # (Credit Card/Line Of Credit) Balance of statement at close
    attr_accessor :statement_close_balance

    # (Mortgage/Loan) Length of loan in months
    attr_accessor :term_of_ml

    # (Mortgage/Loan) Holder of the mortgage or loan
    attr_accessor :ml_holder_name

    # (Mortgage/Loan) Description of loan
    attr_accessor :description

    # (Mortgage/Loan) Late fee charged
    attr_accessor :late_fee_amount

    # (Mortgage/Loan) The amount required to payoff the loan
    attr_accessor :payoff_amount

    # (Mortgage/Loan) Date of final payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :payoff_amount_date

    # (Mortgage/Loan) Original date of loan maturity. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :original_maturity_date

    # (Mortgage/Loan) The principal balance
    attr_accessor :principal_balance

    # (Mortgage/Loan) The escrow balance
    attr_accessor :escrow_balance

    # (Mortgage/Loan) Period of interest
    attr_accessor :interest_period

    # (Mortgage/Loan) Original loan amount
    attr_accessor :initial_ml_amount

    # (Mortgage/Loan) Original date of loan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :initial_ml_date

    # (Mortgage/Loan) Amount towards principal in next payment
    attr_accessor :next_payment_principal_amount

    # (Mortgage/Loan) Amount of interest in next payment
    attr_accessor :next_payment_interest_amount

    # (Mortgage/Loan) Minimum payment due
    attr_accessor :next_payment

    # (Mortgage/Loan) Due date for the next payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :next_payment_date

    # (Mortgage/Loan) Due date of last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :last_payment_due_date

    # (Mortgage/Loan) The date of the last payment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :last_payment_receive_date

    # (Mortgage/Loan) Amount towards principal in last payment
    attr_accessor :last_payment_principal_amount

    # (Mortgage/Loan) Amount of interest in last payment
    attr_accessor :last_payment_interest_amount

    # (Mortgage/Loan) Amount towards escrow in last payment
    attr_accessor :last_payment_escrow_amount

    # (Mortgage/Loan) Amount of last fee in last payment
    attr_accessor :last_payment_last_fee_amount

    # (Mortgage/Loan) Amount of late charge in last payment
    attr_accessor :last_payment_late_charge

    # (Mortgage/Loan) Principal paid year-to-date
    attr_accessor :ytd_principal_paid

    # (Mortgage/Loan) Interest paid year-to-date
    attr_accessor :ytd_interest_paid

    # (Mortgage/Loan) Insurance paid year-to-date
    attr_accessor :ytd_insurance_paid

    # (Mortgage/Loan) Tax paid year-to-date
    attr_accessor :ytd_tax_paid

    # (Mortgage/Loan) Enrolled in autopay (F/Y)
    attr_accessor :auto_pay_enrolled

    # Margin trading indicator (true / false)
    attr_accessor :margin_allowed

    # Cash account allowed indicator (true / false)
    attr_accessor :cash_account_allowed

    # (Mortgage/Loan) Collateral on loan
    attr_accessor :collateral

    # (Mortgage/Loan) Current school
    attr_accessor :current_school

    # (Mortgage/Loan) First payment due date. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :first_payment_date

    # (Mortgage/Loan) First mortgage (F/Y)
    attr_accessor :first_mortgage

    # (Mortgage/Loan) Frequency of payments (monthly, etc.)
    attr_accessor :loan_payment_freq

    # (Mortgage/Loan) Original school
    attr_accessor :original_school

    # (Mortgage/Loan) Recurring payment amount
    attr_accessor :recurring_payment_amount

    # (Mortgage/Loan) Owner of loan
    attr_accessor :lender

    # (Mortgage/Loan) Ending balance
    attr_accessor :ending_balance_amount

    # (Mortgage/Loan) Type of loan term
    attr_accessor :loan_term_type

    # (Mortgage/Loan) Number of payments made
    attr_accessor :payments_made

    # (Mortgage/Loan) Balloon payment amount
    attr_accessor :balloon_amount

    # (Mortgage/Loan) Projected interest on the loan
    attr_accessor :projected_interest

    # (Mortgage/Loan) Interest paid since inception of loan (life to date)
    attr_accessor :interest_paid_ltd

    # (Mortgage/Loan) Type of interest rate
    attr_accessor :interest_rate_type

    # (Mortgage/Loan) Type of loan payment
    attr_accessor :loan_payment_type

    # (Mortgage/Loan) Type of repayment plan for the student loan
    attr_accessor :repayment_plan

    # (Mortgage/Loan) Number of payments remaining before loan is paid off
    attr_accessor :payments_remaining

    # (Investment) Net interest earned after deducting interest paid out
    attr_accessor :margin_balance

    # (Investment) Sum of short balance
    attr_accessor :short_balance

    # (Investment) Amount available for cash withdrawal
    attr_accessor :available_cash_balance

    # (Investment) amount payable to an investor at maturity
    attr_accessor :maturity_value_amount

    # (Investment) Vested amount in account
    attr_accessor :vested_balance

    # (Investment) Employer matched contributions
    attr_accessor :emp_match_amount

    # (Investment) Employer pretax contribution amount
    attr_accessor :emp_pretax_contrib_amount

    # (Investment) Employer pretax contribution amount year to date
    attr_accessor :emp_pretax_contrib_amount_ytd

    # (Investment) Total year to date contributions
    attr_accessor :contrib_total_ytd

    # (Investment) Cash balance of account
    attr_accessor :cash_balance_amount

    # (Investment) Pre-tax amount of total balance
    attr_accessor :pre_tax_amount

    # (Investment) After-tax amount of total balance
    attr_accessor :after_tax_amount

    # (Investment) Amount matched
    attr_accessor :match_amount

    # (Investment) Amount of balance for profit sharing
    attr_accessor :profit_sharing_amount

    # (Investment) Amount of balance rolled over from original account (401k, etc.)
    attr_accessor :rollover_amount

    # (Investment) Other vested amount
    attr_accessor :other_vest_amount

    # (Investment) Other nonvested amount
    attr_accessor :other_nonvest_amount

    # (Investment) Current loan balance
    attr_accessor :current_loan_balance

    # (Investment) Interest rate of loan
    attr_accessor :loan_rate

    # (Investment) Money available to buy securities
    attr_accessor :buy_power

    # (Investment) Life to date of money rolled over
    attr_accessor :rollover_ltd

    # (Student Loan) The federal unique loan identifying number
    attr_accessor :loan_award_id

    # (Student Loan) The original interest rate to which the loan was disbursed, in APY
    attr_accessor :original_interest_rate

    # (Student Loan) The financial institution guarantor of the loan (who will pay the loan amount to the owner if the borrower defaults)
    attr_accessor :guarantor

    # (Student Loan) Owner of the loan
    attr_accessor :owner

    # (Student Loan) The indication of the presence of an interest subsidy (i.e. subsidized)
    attr_accessor :interest_subsidy_type

    # (Student Loan) The total outstanding interest balance
    attr_accessor :interest_balance

    # (Student Loan) The number of months still outstanding on a loan
    attr_accessor :remaining_term_of_ml

    # (Student Loan) Initial interest rate of loan
    attr_accessor :initial_interest_rate

    # (Student Loan) The total outstanding fees balance
    attr_accessor :fees_balance

    # (Student Loan) Loan interest paid year-to-date
    attr_accessor :loan_ytd_interest_paid

    # (Student Loan) Loan fees paid year-to-date
    attr_accessor :loan_ytd_fees_paid

    # (Student Loan) Loan principal paid year-to-date
    attr_accessor :loan_ytd_principal_paid

    # (Student Loan) The repayment status phase (i.e. In School, Grace, Repayment, Deferment, Forbearance)
    attr_accessor :loan_status

    # (Student Loan) The start date of the current status. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :loan_status_start_date

    # (Student Loan) The end date of the current status. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :loan_status_end_date

    # (Student Loan) The interest rate of multiple interest rates and balances at the group level, in APY
    attr_accessor :weighted_interest_rate

    # (Student Loan) The start date of the current repayment plan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :repayment_plan_start_date

    # (Student Loan) The end date of the current repayment plan. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :repayment_plan_end_date

    # (Student Loan) The expected date of the payoff date. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :expected_payoff_date

    # (Student Loan) The date the borrower graduated or dropped below half-time enrollment in school. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :out_of_school_date

    # (Student Loan) The date the loan enters into repayment. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :convert_to_repayment

    # (Student Loan) The number of days past a due date that a payment should have been made
    attr_accessor :days_delinquent

    # (Student Loan) The total amount paid towards the principal balance
    attr_accessor :total_principal_paid

    # (Student Loan) The total amount paid towards interest
    attr_accessor :total_interest_paid

    # (Student Loan) The total amount paid
    attr_accessor :total_amount_paid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date_as_of' => :'dateAsOf',
        :'available_balance_amount' => :'availableBalanceAmount',
        :'open_date' => :'openDate',
        :'period_start_date' => :'periodStartDate',
        :'period_end_date' => :'periodEndDate',
        :'period_interest_rate' => :'periodInterestRate',
        :'period_deposit_amount' => :'periodDepositAmount',
        :'period_interest_amount' => :'periodInterestAmount',
        :'interest_ytd_amount' => :'interestYtdAmount',
        :'interest_prior_ytd_amount' => :'interestPriorYtdAmount',
        :'maturity_date' => :'maturityDate',
        :'interest_rate' => :'interestRate',
        :'credit_available_amount' => :'creditAvailableAmount',
        :'credit_max_amount' => :'creditMaxAmount',
        :'cash_advance_available_amount' => :'cashAdvanceAvailableAmount',
        :'cash_advance_max_amount' => :'cashAdvanceMaxAmount',
        :'cash_advance_balance' => :'cashAdvanceBalance',
        :'cash_advance_interest_rate' => :'cashAdvanceInterestRate',
        :'current_balance' => :'currentBalance',
        :'payment_min_amount' => :'paymentMinAmount',
        :'payment_due_date' => :'paymentDueDate',
        :'previous_balance' => :'previousBalance',
        :'statement_start_date' => :'statementStartDate',
        :'statement_end_date' => :'statementEndDate',
        :'statement_purchase_amount' => :'statementPurchaseAmount',
        :'statement_finance_amount' => :'statementFinanceAmount',
        :'statement_credit_amount' => :'statementCreditAmount',
        :'reward_earned_balance' => :'rewardEarnedBalance',
        :'past_due_amount' => :'pastDueAmount',
        :'last_payment_amount' => :'lastPaymentAmount',
        :'last_payment_date' => :'lastPaymentDate',
        :'statement_close_balance' => :'statementCloseBalance',
        :'term_of_ml' => :'termOfMl',
        :'ml_holder_name' => :'mlHolderName',
        :'description' => :'description',
        :'late_fee_amount' => :'lateFeeAmount',
        :'payoff_amount' => :'payoffAmount',
        :'payoff_amount_date' => :'payoffAmountDate',
        :'original_maturity_date' => :'originalMaturityDate',
        :'principal_balance' => :'principalBalance',
        :'escrow_balance' => :'escrowBalance',
        :'interest_period' => :'interestPeriod',
        :'initial_ml_amount' => :'initialMlAmount',
        :'initial_ml_date' => :'initialMlDate',
        :'next_payment_principal_amount' => :'nextPaymentPrincipalAmount',
        :'next_payment_interest_amount' => :'nextPaymentInterestAmount',
        :'next_payment' => :'nextPayment',
        :'next_payment_date' => :'nextPaymentDate',
        :'last_payment_due_date' => :'lastPaymentDueDate',
        :'last_payment_receive_date' => :'lastPaymentReceiveDate',
        :'last_payment_principal_amount' => :'lastPaymentPrincipalAmount',
        :'last_payment_interest_amount' => :'lastPaymentInterestAmount',
        :'last_payment_escrow_amount' => :'lastPaymentEscrowAmount',
        :'last_payment_last_fee_amount' => :'lastPaymentLastFeeAmount',
        :'last_payment_late_charge' => :'lastPaymentLateCharge',
        :'ytd_principal_paid' => :'ytdPrincipalPaid',
        :'ytd_interest_paid' => :'ytdInterestPaid',
        :'ytd_insurance_paid' => :'ytdInsurancePaid',
        :'ytd_tax_paid' => :'ytdTaxPaid',
        :'auto_pay_enrolled' => :'autoPayEnrolled',
        :'margin_allowed' => :'marginAllowed',
        :'cash_account_allowed' => :'cashAccountAllowed',
        :'collateral' => :'collateral',
        :'current_school' => :'currentSchool',
        :'first_payment_date' => :'firstPaymentDate',
        :'first_mortgage' => :'firstMortgage',
        :'loan_payment_freq' => :'loanPaymentFreq',
        :'original_school' => :'originalSchool',
        :'recurring_payment_amount' => :'recurringPaymentAmount',
        :'lender' => :'lender',
        :'ending_balance_amount' => :'endingBalanceAmount',
        :'loan_term_type' => :'loanTermType',
        :'payments_made' => :'paymentsMade',
        :'balloon_amount' => :'balloonAmount',
        :'projected_interest' => :'projectedInterest',
        :'interest_paid_ltd' => :'interestPaidLtd',
        :'interest_rate_type' => :'interestRateType',
        :'loan_payment_type' => :'loanPaymentType',
        :'repayment_plan' => :'repaymentPlan',
        :'payments_remaining' => :'paymentsRemaining',
        :'margin_balance' => :'marginBalance',
        :'short_balance' => :'shortBalance',
        :'available_cash_balance' => :'availableCashBalance',
        :'maturity_value_amount' => :'maturityValueAmount',
        :'vested_balance' => :'vestedBalance',
        :'emp_match_amount' => :'empMatchAmount',
        :'emp_pretax_contrib_amount' => :'empPretaxContribAmount',
        :'emp_pretax_contrib_amount_ytd' => :'empPretaxContribAmountYtd',
        :'contrib_total_ytd' => :'contribTotalYtd',
        :'cash_balance_amount' => :'cashBalanceAmount',
        :'pre_tax_amount' => :'preTaxAmount',
        :'after_tax_amount' => :'afterTaxAmount',
        :'match_amount' => :'matchAmount',
        :'profit_sharing_amount' => :'profitSharingAmount',
        :'rollover_amount' => :'rolloverAmount',
        :'other_vest_amount' => :'otherVestAmount',
        :'other_nonvest_amount' => :'otherNonvestAmount',
        :'current_loan_balance' => :'currentLoanBalance',
        :'loan_rate' => :'loanRate',
        :'buy_power' => :'buyPower',
        :'rollover_ltd' => :'rolloverLtd',
        :'loan_award_id' => :'loanAwardId',
        :'original_interest_rate' => :'originalInterestRate',
        :'guarantor' => :'guarantor',
        :'owner' => :'owner',
        :'interest_subsidy_type' => :'interestSubsidyType',
        :'interest_balance' => :'interestBalance',
        :'remaining_term_of_ml' => :'remainingTermOfMl',
        :'initial_interest_rate' => :'initialInterestRate',
        :'fees_balance' => :'feesBalance',
        :'loan_ytd_interest_paid' => :'loanYtdInterestPaid',
        :'loan_ytd_fees_paid' => :'loanYtdFeesPaid',
        :'loan_ytd_principal_paid' => :'loanYtdPrincipalPaid',
        :'loan_status' => :'loanStatus',
        :'loan_status_start_date' => :'loanStatusStartDate',
        :'loan_status_end_date' => :'loanStatusEndDate',
        :'weighted_interest_rate' => :'weightedInterestRate',
        :'repayment_plan_start_date' => :'repaymentPlanStartDate',
        :'repayment_plan_end_date' => :'repaymentPlanEndDate',
        :'expected_payoff_date' => :'expectedPayoffDate',
        :'out_of_school_date' => :'outOfSchoolDate',
        :'convert_to_repayment' => :'convertToRepayment',
        :'days_delinquent' => :'daysDelinquent',
        :'total_principal_paid' => :'totalPrincipalPaid',
        :'total_interest_paid' => :'totalInterestPaid',
        :'total_amount_paid' => :'totalAmountPaid'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'date_as_of' => :'Integer',
        :'available_balance_amount' => :'Float',
        :'open_date' => :'Integer',
        :'period_start_date' => :'Integer',
        :'period_end_date' => :'Integer',
        :'period_interest_rate' => :'Float',
        :'period_deposit_amount' => :'Float',
        :'period_interest_amount' => :'Float',
        :'interest_ytd_amount' => :'Float',
        :'interest_prior_ytd_amount' => :'Float',
        :'maturity_date' => :'Integer',
        :'interest_rate' => :'String',
        :'credit_available_amount' => :'Float',
        :'credit_max_amount' => :'Float',
        :'cash_advance_available_amount' => :'Float',
        :'cash_advance_max_amount' => :'Float',
        :'cash_advance_balance' => :'Float',
        :'cash_advance_interest_rate' => :'Float',
        :'current_balance' => :'Float',
        :'payment_min_amount' => :'Float',
        :'payment_due_date' => :'Integer',
        :'previous_balance' => :'Float',
        :'statement_start_date' => :'Integer',
        :'statement_end_date' => :'Integer',
        :'statement_purchase_amount' => :'Float',
        :'statement_finance_amount' => :'Float',
        :'statement_credit_amount' => :'Float',
        :'reward_earned_balance' => :'Integer',
        :'past_due_amount' => :'Float',
        :'last_payment_amount' => :'Float',
        :'last_payment_date' => :'Integer',
        :'statement_close_balance' => :'Float',
        :'term_of_ml' => :'String',
        :'ml_holder_name' => :'String',
        :'description' => :'String',
        :'late_fee_amount' => :'Float',
        :'payoff_amount' => :'Float',
        :'payoff_amount_date' => :'Integer',
        :'original_maturity_date' => :'Integer',
        :'principal_balance' => :'Float',
        :'escrow_balance' => :'Float',
        :'interest_period' => :'String',
        :'initial_ml_amount' => :'Float',
        :'initial_ml_date' => :'Integer',
        :'next_payment_principal_amount' => :'Float',
        :'next_payment_interest_amount' => :'Float',
        :'next_payment' => :'Float',
        :'next_payment_date' => :'Integer',
        :'last_payment_due_date' => :'Integer',
        :'last_payment_receive_date' => :'Integer',
        :'last_payment_principal_amount' => :'Float',
        :'last_payment_interest_amount' => :'Float',
        :'last_payment_escrow_amount' => :'Float',
        :'last_payment_last_fee_amount' => :'Float',
        :'last_payment_late_charge' => :'Float',
        :'ytd_principal_paid' => :'Float',
        :'ytd_interest_paid' => :'Float',
        :'ytd_insurance_paid' => :'Float',
        :'ytd_tax_paid' => :'Float',
        :'auto_pay_enrolled' => :'Boolean',
        :'margin_allowed' => :'Boolean',
        :'cash_account_allowed' => :'Boolean',
        :'collateral' => :'String',
        :'current_school' => :'String',
        :'first_payment_date' => :'Integer',
        :'first_mortgage' => :'Boolean',
        :'loan_payment_freq' => :'String',
        :'original_school' => :'String',
        :'recurring_payment_amount' => :'Float',
        :'lender' => :'String',
        :'ending_balance_amount' => :'Float',
        :'loan_term_type' => :'String',
        :'payments_made' => :'Integer',
        :'balloon_amount' => :'Float',
        :'projected_interest' => :'Float',
        :'interest_paid_ltd' => :'Float',
        :'interest_rate_type' => :'String',
        :'loan_payment_type' => :'String',
        :'repayment_plan' => :'String',
        :'payments_remaining' => :'Integer',
        :'margin_balance' => :'Float',
        :'short_balance' => :'Float',
        :'available_cash_balance' => :'Float',
        :'maturity_value_amount' => :'Float',
        :'vested_balance' => :'Float',
        :'emp_match_amount' => :'Float',
        :'emp_pretax_contrib_amount' => :'Float',
        :'emp_pretax_contrib_amount_ytd' => :'Float',
        :'contrib_total_ytd' => :'Float',
        :'cash_balance_amount' => :'Float',
        :'pre_tax_amount' => :'Float',
        :'after_tax_amount' => :'Float',
        :'match_amount' => :'Float',
        :'profit_sharing_amount' => :'Float',
        :'rollover_amount' => :'Float',
        :'other_vest_amount' => :'Float',
        :'other_nonvest_amount' => :'Float',
        :'current_loan_balance' => :'Float',
        :'loan_rate' => :'Float',
        :'buy_power' => :'Float',
        :'rollover_ltd' => :'Float',
        :'loan_award_id' => :'String',
        :'original_interest_rate' => :'Float',
        :'guarantor' => :'String',
        :'owner' => :'String',
        :'interest_subsidy_type' => :'String',
        :'interest_balance' => :'Float',
        :'remaining_term_of_ml' => :'Float',
        :'initial_interest_rate' => :'Float',
        :'fees_balance' => :'Float',
        :'loan_ytd_interest_paid' => :'Float',
        :'loan_ytd_fees_paid' => :'Float',
        :'loan_ytd_principal_paid' => :'Float',
        :'loan_status' => :'String',
        :'loan_status_start_date' => :'Integer',
        :'loan_status_end_date' => :'Integer',
        :'weighted_interest_rate' => :'Float',
        :'repayment_plan_start_date' => :'Integer',
        :'repayment_plan_end_date' => :'Integer',
        :'expected_payoff_date' => :'Integer',
        :'out_of_school_date' => :'Integer',
        :'convert_to_repayment' => :'Integer',
        :'days_delinquent' => :'Integer',
        :'total_principal_paid' => :'Float',
        :'total_interest_paid' => :'Float',
        :'total_amount_paid' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::CustomerAccountDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::CustomerAccountDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'date_as_of')
        self.date_as_of = attributes[:'date_as_of']
      end

      if attributes.key?(:'available_balance_amount')
        self.available_balance_amount = attributes[:'available_balance_amount']
      end

      if attributes.key?(:'open_date')
        self.open_date = attributes[:'open_date']
      end

      if attributes.key?(:'period_start_date')
        self.period_start_date = attributes[:'period_start_date']
      end

      if attributes.key?(:'period_end_date')
        self.period_end_date = attributes[:'period_end_date']
      end

      if attributes.key?(:'period_interest_rate')
        self.period_interest_rate = attributes[:'period_interest_rate']
      end

      if attributes.key?(:'period_deposit_amount')
        self.period_deposit_amount = attributes[:'period_deposit_amount']
      end

      if attributes.key?(:'period_interest_amount')
        self.period_interest_amount = attributes[:'period_interest_amount']
      end

      if attributes.key?(:'interest_ytd_amount')
        self.interest_ytd_amount = attributes[:'interest_ytd_amount']
      end

      if attributes.key?(:'interest_prior_ytd_amount')
        self.interest_prior_ytd_amount = attributes[:'interest_prior_ytd_amount']
      end

      if attributes.key?(:'maturity_date')
        self.maturity_date = attributes[:'maturity_date']
      end

      if attributes.key?(:'interest_rate')
        self.interest_rate = attributes[:'interest_rate']
      end

      if attributes.key?(:'credit_available_amount')
        self.credit_available_amount = attributes[:'credit_available_amount']
      end

      if attributes.key?(:'credit_max_amount')
        self.credit_max_amount = attributes[:'credit_max_amount']
      end

      if attributes.key?(:'cash_advance_available_amount')
        self.cash_advance_available_amount = attributes[:'cash_advance_available_amount']
      end

      if attributes.key?(:'cash_advance_max_amount')
        self.cash_advance_max_amount = attributes[:'cash_advance_max_amount']
      end

      if attributes.key?(:'cash_advance_balance')
        self.cash_advance_balance = attributes[:'cash_advance_balance']
      end

      if attributes.key?(:'cash_advance_interest_rate')
        self.cash_advance_interest_rate = attributes[:'cash_advance_interest_rate']
      end

      if attributes.key?(:'current_balance')
        self.current_balance = attributes[:'current_balance']
      end

      if attributes.key?(:'payment_min_amount')
        self.payment_min_amount = attributes[:'payment_min_amount']
      end

      if attributes.key?(:'payment_due_date')
        self.payment_due_date = attributes[:'payment_due_date']
      end

      if attributes.key?(:'previous_balance')
        self.previous_balance = attributes[:'previous_balance']
      end

      if attributes.key?(:'statement_start_date')
        self.statement_start_date = attributes[:'statement_start_date']
      end

      if attributes.key?(:'statement_end_date')
        self.statement_end_date = attributes[:'statement_end_date']
      end

      if attributes.key?(:'statement_purchase_amount')
        self.statement_purchase_amount = attributes[:'statement_purchase_amount']
      end

      if attributes.key?(:'statement_finance_amount')
        self.statement_finance_amount = attributes[:'statement_finance_amount']
      end

      if attributes.key?(:'statement_credit_amount')
        self.statement_credit_amount = attributes[:'statement_credit_amount']
      end

      if attributes.key?(:'reward_earned_balance')
        self.reward_earned_balance = attributes[:'reward_earned_balance']
      end

      if attributes.key?(:'past_due_amount')
        self.past_due_amount = attributes[:'past_due_amount']
      end

      if attributes.key?(:'last_payment_amount')
        self.last_payment_amount = attributes[:'last_payment_amount']
      end

      if attributes.key?(:'last_payment_date')
        self.last_payment_date = attributes[:'last_payment_date']
      end

      if attributes.key?(:'statement_close_balance')
        self.statement_close_balance = attributes[:'statement_close_balance']
      end

      if attributes.key?(:'term_of_ml')
        self.term_of_ml = attributes[:'term_of_ml']
      end

      if attributes.key?(:'ml_holder_name')
        self.ml_holder_name = attributes[:'ml_holder_name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'late_fee_amount')
        self.late_fee_amount = attributes[:'late_fee_amount']
      end

      if attributes.key?(:'payoff_amount')
        self.payoff_amount = attributes[:'payoff_amount']
      end

      if attributes.key?(:'payoff_amount_date')
        self.payoff_amount_date = attributes[:'payoff_amount_date']
      end

      if attributes.key?(:'original_maturity_date')
        self.original_maturity_date = attributes[:'original_maturity_date']
      end

      if attributes.key?(:'principal_balance')
        self.principal_balance = attributes[:'principal_balance']
      end

      if attributes.key?(:'escrow_balance')
        self.escrow_balance = attributes[:'escrow_balance']
      end

      if attributes.key?(:'interest_period')
        self.interest_period = attributes[:'interest_period']
      end

      if attributes.key?(:'initial_ml_amount')
        self.initial_ml_amount = attributes[:'initial_ml_amount']
      end

      if attributes.key?(:'initial_ml_date')
        self.initial_ml_date = attributes[:'initial_ml_date']
      end

      if attributes.key?(:'next_payment_principal_amount')
        self.next_payment_principal_amount = attributes[:'next_payment_principal_amount']
      end

      if attributes.key?(:'next_payment_interest_amount')
        self.next_payment_interest_amount = attributes[:'next_payment_interest_amount']
      end

      if attributes.key?(:'next_payment')
        self.next_payment = attributes[:'next_payment']
      end

      if attributes.key?(:'next_payment_date')
        self.next_payment_date = attributes[:'next_payment_date']
      end

      if attributes.key?(:'last_payment_due_date')
        self.last_payment_due_date = attributes[:'last_payment_due_date']
      end

      if attributes.key?(:'last_payment_receive_date')
        self.last_payment_receive_date = attributes[:'last_payment_receive_date']
      end

      if attributes.key?(:'last_payment_principal_amount')
        self.last_payment_principal_amount = attributes[:'last_payment_principal_amount']
      end

      if attributes.key?(:'last_payment_interest_amount')
        self.last_payment_interest_amount = attributes[:'last_payment_interest_amount']
      end

      if attributes.key?(:'last_payment_escrow_amount')
        self.last_payment_escrow_amount = attributes[:'last_payment_escrow_amount']
      end

      if attributes.key?(:'last_payment_last_fee_amount')
        self.last_payment_last_fee_amount = attributes[:'last_payment_last_fee_amount']
      end

      if attributes.key?(:'last_payment_late_charge')
        self.last_payment_late_charge = attributes[:'last_payment_late_charge']
      end

      if attributes.key?(:'ytd_principal_paid')
        self.ytd_principal_paid = attributes[:'ytd_principal_paid']
      end

      if attributes.key?(:'ytd_interest_paid')
        self.ytd_interest_paid = attributes[:'ytd_interest_paid']
      end

      if attributes.key?(:'ytd_insurance_paid')
        self.ytd_insurance_paid = attributes[:'ytd_insurance_paid']
      end

      if attributes.key?(:'ytd_tax_paid')
        self.ytd_tax_paid = attributes[:'ytd_tax_paid']
      end

      if attributes.key?(:'auto_pay_enrolled')
        self.auto_pay_enrolled = attributes[:'auto_pay_enrolled']
      end

      if attributes.key?(:'margin_allowed')
        self.margin_allowed = attributes[:'margin_allowed']
      end

      if attributes.key?(:'cash_account_allowed')
        self.cash_account_allowed = attributes[:'cash_account_allowed']
      end

      if attributes.key?(:'collateral')
        self.collateral = attributes[:'collateral']
      end

      if attributes.key?(:'current_school')
        self.current_school = attributes[:'current_school']
      end

      if attributes.key?(:'first_payment_date')
        self.first_payment_date = attributes[:'first_payment_date']
      end

      if attributes.key?(:'first_mortgage')
        self.first_mortgage = attributes[:'first_mortgage']
      end

      if attributes.key?(:'loan_payment_freq')
        self.loan_payment_freq = attributes[:'loan_payment_freq']
      end

      if attributes.key?(:'original_school')
        self.original_school = attributes[:'original_school']
      end

      if attributes.key?(:'recurring_payment_amount')
        self.recurring_payment_amount = attributes[:'recurring_payment_amount']
      end

      if attributes.key?(:'lender')
        self.lender = attributes[:'lender']
      end

      if attributes.key?(:'ending_balance_amount')
        self.ending_balance_amount = attributes[:'ending_balance_amount']
      end

      if attributes.key?(:'loan_term_type')
        self.loan_term_type = attributes[:'loan_term_type']
      end

      if attributes.key?(:'payments_made')
        self.payments_made = attributes[:'payments_made']
      end

      if attributes.key?(:'balloon_amount')
        self.balloon_amount = attributes[:'balloon_amount']
      end

      if attributes.key?(:'projected_interest')
        self.projected_interest = attributes[:'projected_interest']
      end

      if attributes.key?(:'interest_paid_ltd')
        self.interest_paid_ltd = attributes[:'interest_paid_ltd']
      end

      if attributes.key?(:'interest_rate_type')
        self.interest_rate_type = attributes[:'interest_rate_type']
      end

      if attributes.key?(:'loan_payment_type')
        self.loan_payment_type = attributes[:'loan_payment_type']
      end

      if attributes.key?(:'repayment_plan')
        self.repayment_plan = attributes[:'repayment_plan']
      end

      if attributes.key?(:'payments_remaining')
        self.payments_remaining = attributes[:'payments_remaining']
      end

      if attributes.key?(:'margin_balance')
        self.margin_balance = attributes[:'margin_balance']
      end

      if attributes.key?(:'short_balance')
        self.short_balance = attributes[:'short_balance']
      end

      if attributes.key?(:'available_cash_balance')
        self.available_cash_balance = attributes[:'available_cash_balance']
      end

      if attributes.key?(:'maturity_value_amount')
        self.maturity_value_amount = attributes[:'maturity_value_amount']
      end

      if attributes.key?(:'vested_balance')
        self.vested_balance = attributes[:'vested_balance']
      end

      if attributes.key?(:'emp_match_amount')
        self.emp_match_amount = attributes[:'emp_match_amount']
      end

      if attributes.key?(:'emp_pretax_contrib_amount')
        self.emp_pretax_contrib_amount = attributes[:'emp_pretax_contrib_amount']
      end

      if attributes.key?(:'emp_pretax_contrib_amount_ytd')
        self.emp_pretax_contrib_amount_ytd = attributes[:'emp_pretax_contrib_amount_ytd']
      end

      if attributes.key?(:'contrib_total_ytd')
        self.contrib_total_ytd = attributes[:'contrib_total_ytd']
      end

      if attributes.key?(:'cash_balance_amount')
        self.cash_balance_amount = attributes[:'cash_balance_amount']
      end

      if attributes.key?(:'pre_tax_amount')
        self.pre_tax_amount = attributes[:'pre_tax_amount']
      end

      if attributes.key?(:'after_tax_amount')
        self.after_tax_amount = attributes[:'after_tax_amount']
      end

      if attributes.key?(:'match_amount')
        self.match_amount = attributes[:'match_amount']
      end

      if attributes.key?(:'profit_sharing_amount')
        self.profit_sharing_amount = attributes[:'profit_sharing_amount']
      end

      if attributes.key?(:'rollover_amount')
        self.rollover_amount = attributes[:'rollover_amount']
      end

      if attributes.key?(:'other_vest_amount')
        self.other_vest_amount = attributes[:'other_vest_amount']
      end

      if attributes.key?(:'other_nonvest_amount')
        self.other_nonvest_amount = attributes[:'other_nonvest_amount']
      end

      if attributes.key?(:'current_loan_balance')
        self.current_loan_balance = attributes[:'current_loan_balance']
      end

      if attributes.key?(:'loan_rate')
        self.loan_rate = attributes[:'loan_rate']
      end

      if attributes.key?(:'buy_power')
        self.buy_power = attributes[:'buy_power']
      end

      if attributes.key?(:'rollover_ltd')
        self.rollover_ltd = attributes[:'rollover_ltd']
      end

      if attributes.key?(:'loan_award_id')
        self.loan_award_id = attributes[:'loan_award_id']
      end

      if attributes.key?(:'original_interest_rate')
        self.original_interest_rate = attributes[:'original_interest_rate']
      end

      if attributes.key?(:'guarantor')
        self.guarantor = attributes[:'guarantor']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'interest_subsidy_type')
        self.interest_subsidy_type = attributes[:'interest_subsidy_type']
      end

      if attributes.key?(:'interest_balance')
        self.interest_balance = attributes[:'interest_balance']
      end

      if attributes.key?(:'remaining_term_of_ml')
        self.remaining_term_of_ml = attributes[:'remaining_term_of_ml']
      end

      if attributes.key?(:'initial_interest_rate')
        self.initial_interest_rate = attributes[:'initial_interest_rate']
      end

      if attributes.key?(:'fees_balance')
        self.fees_balance = attributes[:'fees_balance']
      end

      if attributes.key?(:'loan_ytd_interest_paid')
        self.loan_ytd_interest_paid = attributes[:'loan_ytd_interest_paid']
      end

      if attributes.key?(:'loan_ytd_fees_paid')
        self.loan_ytd_fees_paid = attributes[:'loan_ytd_fees_paid']
      end

      if attributes.key?(:'loan_ytd_principal_paid')
        self.loan_ytd_principal_paid = attributes[:'loan_ytd_principal_paid']
      end

      if attributes.key?(:'loan_status')
        self.loan_status = attributes[:'loan_status']
      end

      if attributes.key?(:'loan_status_start_date')
        self.loan_status_start_date = attributes[:'loan_status_start_date']
      end

      if attributes.key?(:'loan_status_end_date')
        self.loan_status_end_date = attributes[:'loan_status_end_date']
      end

      if attributes.key?(:'weighted_interest_rate')
        self.weighted_interest_rate = attributes[:'weighted_interest_rate']
      end

      if attributes.key?(:'repayment_plan_start_date')
        self.repayment_plan_start_date = attributes[:'repayment_plan_start_date']
      end

      if attributes.key?(:'repayment_plan_end_date')
        self.repayment_plan_end_date = attributes[:'repayment_plan_end_date']
      end

      if attributes.key?(:'expected_payoff_date')
        self.expected_payoff_date = attributes[:'expected_payoff_date']
      end

      if attributes.key?(:'out_of_school_date')
        self.out_of_school_date = attributes[:'out_of_school_date']
      end

      if attributes.key?(:'convert_to_repayment')
        self.convert_to_repayment = attributes[:'convert_to_repayment']
      end

      if attributes.key?(:'days_delinquent')
        self.days_delinquent = attributes[:'days_delinquent']
      end

      if attributes.key?(:'total_principal_paid')
        self.total_principal_paid = attributes[:'total_principal_paid']
      end

      if attributes.key?(:'total_interest_paid')
        self.total_interest_paid = attributes[:'total_interest_paid']
      end

      if attributes.key?(:'total_amount_paid')
        self.total_amount_paid = attributes[:'total_amount_paid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date_as_of == o.date_as_of &&
          available_balance_amount == o.available_balance_amount &&
          open_date == o.open_date &&
          period_start_date == o.period_start_date &&
          period_end_date == o.period_end_date &&
          period_interest_rate == o.period_interest_rate &&
          period_deposit_amount == o.period_deposit_amount &&
          period_interest_amount == o.period_interest_amount &&
          interest_ytd_amount == o.interest_ytd_amount &&
          interest_prior_ytd_amount == o.interest_prior_ytd_amount &&
          maturity_date == o.maturity_date &&
          interest_rate == o.interest_rate &&
          credit_available_amount == o.credit_available_amount &&
          credit_max_amount == o.credit_max_amount &&
          cash_advance_available_amount == o.cash_advance_available_amount &&
          cash_advance_max_amount == o.cash_advance_max_amount &&
          cash_advance_balance == o.cash_advance_balance &&
          cash_advance_interest_rate == o.cash_advance_interest_rate &&
          current_balance == o.current_balance &&
          payment_min_amount == o.payment_min_amount &&
          payment_due_date == o.payment_due_date &&
          previous_balance == o.previous_balance &&
          statement_start_date == o.statement_start_date &&
          statement_end_date == o.statement_end_date &&
          statement_purchase_amount == o.statement_purchase_amount &&
          statement_finance_amount == o.statement_finance_amount &&
          statement_credit_amount == o.statement_credit_amount &&
          reward_earned_balance == o.reward_earned_balance &&
          past_due_amount == o.past_due_amount &&
          last_payment_amount == o.last_payment_amount &&
          last_payment_date == o.last_payment_date &&
          statement_close_balance == o.statement_close_balance &&
          term_of_ml == o.term_of_ml &&
          ml_holder_name == o.ml_holder_name &&
          description == o.description &&
          late_fee_amount == o.late_fee_amount &&
          payoff_amount == o.payoff_amount &&
          payoff_amount_date == o.payoff_amount_date &&
          original_maturity_date == o.original_maturity_date &&
          principal_balance == o.principal_balance &&
          escrow_balance == o.escrow_balance &&
          interest_period == o.interest_period &&
          initial_ml_amount == o.initial_ml_amount &&
          initial_ml_date == o.initial_ml_date &&
          next_payment_principal_amount == o.next_payment_principal_amount &&
          next_payment_interest_amount == o.next_payment_interest_amount &&
          next_payment == o.next_payment &&
          next_payment_date == o.next_payment_date &&
          last_payment_due_date == o.last_payment_due_date &&
          last_payment_receive_date == o.last_payment_receive_date &&
          last_payment_principal_amount == o.last_payment_principal_amount &&
          last_payment_interest_amount == o.last_payment_interest_amount &&
          last_payment_escrow_amount == o.last_payment_escrow_amount &&
          last_payment_last_fee_amount == o.last_payment_last_fee_amount &&
          last_payment_late_charge == o.last_payment_late_charge &&
          ytd_principal_paid == o.ytd_principal_paid &&
          ytd_interest_paid == o.ytd_interest_paid &&
          ytd_insurance_paid == o.ytd_insurance_paid &&
          ytd_tax_paid == o.ytd_tax_paid &&
          auto_pay_enrolled == o.auto_pay_enrolled &&
          margin_allowed == o.margin_allowed &&
          cash_account_allowed == o.cash_account_allowed &&
          collateral == o.collateral &&
          current_school == o.current_school &&
          first_payment_date == o.first_payment_date &&
          first_mortgage == o.first_mortgage &&
          loan_payment_freq == o.loan_payment_freq &&
          original_school == o.original_school &&
          recurring_payment_amount == o.recurring_payment_amount &&
          lender == o.lender &&
          ending_balance_amount == o.ending_balance_amount &&
          loan_term_type == o.loan_term_type &&
          payments_made == o.payments_made &&
          balloon_amount == o.balloon_amount &&
          projected_interest == o.projected_interest &&
          interest_paid_ltd == o.interest_paid_ltd &&
          interest_rate_type == o.interest_rate_type &&
          loan_payment_type == o.loan_payment_type &&
          repayment_plan == o.repayment_plan &&
          payments_remaining == o.payments_remaining &&
          margin_balance == o.margin_balance &&
          short_balance == o.short_balance &&
          available_cash_balance == o.available_cash_balance &&
          maturity_value_amount == o.maturity_value_amount &&
          vested_balance == o.vested_balance &&
          emp_match_amount == o.emp_match_amount &&
          emp_pretax_contrib_amount == o.emp_pretax_contrib_amount &&
          emp_pretax_contrib_amount_ytd == o.emp_pretax_contrib_amount_ytd &&
          contrib_total_ytd == o.contrib_total_ytd &&
          cash_balance_amount == o.cash_balance_amount &&
          pre_tax_amount == o.pre_tax_amount &&
          after_tax_amount == o.after_tax_amount &&
          match_amount == o.match_amount &&
          profit_sharing_amount == o.profit_sharing_amount &&
          rollover_amount == o.rollover_amount &&
          other_vest_amount == o.other_vest_amount &&
          other_nonvest_amount == o.other_nonvest_amount &&
          current_loan_balance == o.current_loan_balance &&
          loan_rate == o.loan_rate &&
          buy_power == o.buy_power &&
          rollover_ltd == o.rollover_ltd &&
          loan_award_id == o.loan_award_id &&
          original_interest_rate == o.original_interest_rate &&
          guarantor == o.guarantor &&
          owner == o.owner &&
          interest_subsidy_type == o.interest_subsidy_type &&
          interest_balance == o.interest_balance &&
          remaining_term_of_ml == o.remaining_term_of_ml &&
          initial_interest_rate == o.initial_interest_rate &&
          fees_balance == o.fees_balance &&
          loan_ytd_interest_paid == o.loan_ytd_interest_paid &&
          loan_ytd_fees_paid == o.loan_ytd_fees_paid &&
          loan_ytd_principal_paid == o.loan_ytd_principal_paid &&
          loan_status == o.loan_status &&
          loan_status_start_date == o.loan_status_start_date &&
          loan_status_end_date == o.loan_status_end_date &&
          weighted_interest_rate == o.weighted_interest_rate &&
          repayment_plan_start_date == o.repayment_plan_start_date &&
          repayment_plan_end_date == o.repayment_plan_end_date &&
          expected_payoff_date == o.expected_payoff_date &&
          out_of_school_date == o.out_of_school_date &&
          convert_to_repayment == o.convert_to_repayment &&
          days_delinquent == o.days_delinquent &&
          total_principal_paid == o.total_principal_paid &&
          total_interest_paid == o.total_interest_paid &&
          total_amount_paid == o.total_amount_paid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date_as_of, available_balance_amount, open_date, period_start_date, period_end_date, period_interest_rate, period_deposit_amount, period_interest_amount, interest_ytd_amount, interest_prior_ytd_amount, maturity_date, interest_rate, credit_available_amount, credit_max_amount, cash_advance_available_amount, cash_advance_max_amount, cash_advance_balance, cash_advance_interest_rate, current_balance, payment_min_amount, payment_due_date, previous_balance, statement_start_date, statement_end_date, statement_purchase_amount, statement_finance_amount, statement_credit_amount, reward_earned_balance, past_due_amount, last_payment_amount, last_payment_date, statement_close_balance, term_of_ml, ml_holder_name, description, late_fee_amount, payoff_amount, payoff_amount_date, original_maturity_date, principal_balance, escrow_balance, interest_period, initial_ml_amount, initial_ml_date, next_payment_principal_amount, next_payment_interest_amount, next_payment, next_payment_date, last_payment_due_date, last_payment_receive_date, last_payment_principal_amount, last_payment_interest_amount, last_payment_escrow_amount, last_payment_last_fee_amount, last_payment_late_charge, ytd_principal_paid, ytd_interest_paid, ytd_insurance_paid, ytd_tax_paid, auto_pay_enrolled, margin_allowed, cash_account_allowed, collateral, current_school, first_payment_date, first_mortgage, loan_payment_freq, original_school, recurring_payment_amount, lender, ending_balance_amount, loan_term_type, payments_made, balloon_amount, projected_interest, interest_paid_ltd, interest_rate_type, loan_payment_type, repayment_plan, payments_remaining, margin_balance, short_balance, available_cash_balance, maturity_value_amount, vested_balance, emp_match_amount, emp_pretax_contrib_amount, emp_pretax_contrib_amount_ytd, contrib_total_ytd, cash_balance_amount, pre_tax_amount, after_tax_amount, match_amount, profit_sharing_amount, rollover_amount, other_vest_amount, other_nonvest_amount, current_loan_balance, loan_rate, buy_power, rollover_ltd, loan_award_id, original_interest_rate, guarantor, owner, interest_subsidy_type, interest_balance, remaining_term_of_ml, initial_interest_rate, fees_balance, loan_ytd_interest_paid, loan_ytd_fees_paid, loan_ytd_principal_paid, loan_status, loan_status_start_date, loan_status_end_date, weighted_interest_rate, repayment_plan_start_date, repayment_plan_end_date, expected_payoff_date, out_of_school_date, convert_to_repayment, days_delinquent, total_principal_paid, total_interest_paid, total_amount_paid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
