=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Details of the account and financial institution
  class ObbAccountDetails
    # The account number from a financial institution in truncated format
    attr_accessor :account_number_display

    attr_accessor :account_owner

    # A timestamp showing the last aggregation attempt. This will not be present until you have run your first aggregation for the account.
    attr_accessor :aggregation_attempt_date

    # The status of the most recent aggregation attempt. This will not be present until you have run your first aggregation for the account
    attr_accessor :aggregation_status_code

    # A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account.
    attr_accessor :aggregation_success_date

    # The currency of the account
    attr_accessor :currency

    # Current reported balance of the account
    attr_accessor :current_balance

    # An account ID represented as a number
    attr_accessor :id

    attr_accessor :institution

    # An institution login ID (from the account record), represented as a number
    attr_accessor :institution_login_id

    # The account name from the institution
    attr_accessor :name

    # The last 4 digits of the ACH account number
    attr_accessor :real_account_number_last4

    # pending during account discovery, always active following successful account activation
    attr_accessor :status

    # Account type, e.g. checking/saving
    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number_display' => :'accountNumberDisplay',
        :'account_owner' => :'accountOwner',
        :'aggregation_attempt_date' => :'aggregationAttemptDate',
        :'aggregation_status_code' => :'aggregationStatusCode',
        :'aggregation_success_date' => :'aggregationSuccessDate',
        :'currency' => :'currency',
        :'current_balance' => :'currentBalance',
        :'id' => :'id',
        :'institution' => :'institution',
        :'institution_login_id' => :'institutionLoginId',
        :'name' => :'name',
        :'real_account_number_last4' => :'realAccountNumberLast4',
        :'status' => :'status',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number_display' => :'String',
        :'account_owner' => :'ObbAccountOwner',
        :'aggregation_attempt_date' => :'String',
        :'aggregation_status_code' => :'Integer',
        :'aggregation_success_date' => :'String',
        :'currency' => :'String',
        :'current_balance' => :'Float',
        :'id' => :'Integer',
        :'institution' => :'ObbInstitution',
        :'institution_login_id' => :'Integer',
        :'name' => :'String',
        :'real_account_number_last4' => :'Integer',
        :'status' => :'String',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::ObbAccountDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::ObbAccountDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number_display')
        self.account_number_display = attributes[:'account_number_display']
      end

      if attributes.key?(:'account_owner')
        self.account_owner = attributes[:'account_owner']
      else
        self.account_owner = nil
      end

      if attributes.key?(:'aggregation_attempt_date')
        self.aggregation_attempt_date = attributes[:'aggregation_attempt_date']
      end

      if attributes.key?(:'aggregation_status_code')
        self.aggregation_status_code = attributes[:'aggregation_status_code']
      end

      if attributes.key?(:'aggregation_success_date')
        self.aggregation_success_date = attributes[:'aggregation_success_date']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'current_balance')
        self.current_balance = attributes[:'current_balance']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'institution')
        self.institution = attributes[:'institution']
      else
        self.institution = nil
      end

      if attributes.key?(:'institution_login_id')
        self.institution_login_id = attributes[:'institution_login_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'real_account_number_last4')
        self.real_account_number_last4 = attributes[:'real_account_number_last4']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@account_number_display.nil? && @account_number_display.to_s.length > 50
        invalid_properties.push('invalid value for "account_number_display", the character length must be smaller than or equal to 50.')
      end

      if !@account_number_display.nil? && @account_number_display.to_s.length < 0
        invalid_properties.push('invalid value for "account_number_display", the character length must be great than or equal to 0.')
      end

      if @account_owner.nil?
        invalid_properties.push('invalid value for "account_owner", account_owner cannot be nil.')
      end

      if !@aggregation_attempt_date.nil? && @aggregation_attempt_date.to_s.length > 25
        invalid_properties.push('invalid value for "aggregation_attempt_date", the character length must be smaller than or equal to 25.')
      end

      if !@aggregation_attempt_date.nil? && @aggregation_attempt_date.to_s.length < 25
        invalid_properties.push('invalid value for "aggregation_attempt_date", the character length must be great than or equal to 25.')
      end

      if !@aggregation_success_date.nil? && @aggregation_success_date.to_s.length > 25
        invalid_properties.push('invalid value for "aggregation_success_date", the character length must be smaller than or equal to 25.')
      end

      if !@aggregation_success_date.nil? && @aggregation_success_date.to_s.length < 25
        invalid_properties.push('invalid value for "aggregation_success_date", the character length must be great than or equal to 25.')
      end

      if !@currency.nil? && @currency.to_s.length > 5
        invalid_properties.push('invalid value for "currency", the character length must be smaller than or equal to 5.')
      end

      if !@currency.nil? && @currency.to_s.length < 0
        invalid_properties.push('invalid value for "currency", the character length must be great than or equal to 0.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @institution.nil?
        invalid_properties.push('invalid value for "institution", institution cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      if !@name.nil? && @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@status.nil? && @status.to_s.length > 50
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 50.')
      end

      if !@status.nil? && @status.to_s.length < 0
        invalid_properties.push('invalid value for "status", the character length must be great than or equal to 0.')
      end

      if !@type.nil? && @type.to_s.length > 50
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 50.')
      end

      if !@type.nil? && @type.to_s.length < 0
        invalid_properties.push('invalid value for "type", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@account_number_display.nil? && @account_number_display.to_s.length > 50
      return false if !@account_number_display.nil? && @account_number_display.to_s.length < 0
      return false if @account_owner.nil?
      return false if !@aggregation_attempt_date.nil? && @aggregation_attempt_date.to_s.length > 25
      return false if !@aggregation_attempt_date.nil? && @aggregation_attempt_date.to_s.length < 25
      return false if !@aggregation_success_date.nil? && @aggregation_success_date.to_s.length > 25
      return false if !@aggregation_success_date.nil? && @aggregation_success_date.to_s.length < 25
      return false if !@currency.nil? && @currency.to_s.length > 5
      return false if !@currency.nil? && @currency.to_s.length < 0
      return false if @id.nil?
      return false if @institution.nil?
      return false if !@name.nil? && @name.to_s.length > 50
      return false if !@name.nil? && @name.to_s.length < 0
      return false if !@status.nil? && @status.to_s.length > 50
      return false if !@status.nil? && @status.to_s.length < 0
      return false if !@type.nil? && @type.to_s.length > 50
      return false if !@type.nil? && @type.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number_display Value to be assigned
    def account_number_display=(account_number_display)
      if account_number_display.nil?
        fail ArgumentError, 'account_number_display cannot be nil'
      end

      if account_number_display.to_s.length > 50
        fail ArgumentError, 'invalid value for "account_number_display", the character length must be smaller than or equal to 50.'
      end

      if account_number_display.to_s.length < 0
        fail ArgumentError, 'invalid value for "account_number_display", the character length must be great than or equal to 0.'
      end

      @account_number_display = account_number_display
    end

    # Custom attribute writer method with validation
    # @param [Object] aggregation_attempt_date Value to be assigned
    def aggregation_attempt_date=(aggregation_attempt_date)
      if aggregation_attempt_date.nil?
        fail ArgumentError, 'aggregation_attempt_date cannot be nil'
      end

      if aggregation_attempt_date.to_s.length > 25
        fail ArgumentError, 'invalid value for "aggregation_attempt_date", the character length must be smaller than or equal to 25.'
      end

      if aggregation_attempt_date.to_s.length < 25
        fail ArgumentError, 'invalid value for "aggregation_attempt_date", the character length must be great than or equal to 25.'
      end

      @aggregation_attempt_date = aggregation_attempt_date
    end

    # Custom attribute writer method with validation
    # @param [Object] aggregation_success_date Value to be assigned
    def aggregation_success_date=(aggregation_success_date)
      if aggregation_success_date.nil?
        fail ArgumentError, 'aggregation_success_date cannot be nil'
      end

      if aggregation_success_date.to_s.length > 25
        fail ArgumentError, 'invalid value for "aggregation_success_date", the character length must be smaller than or equal to 25.'
      end

      if aggregation_success_date.to_s.length < 25
        fail ArgumentError, 'invalid value for "aggregation_success_date", the character length must be great than or equal to 25.'
      end

      @aggregation_success_date = aggregation_success_date
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if currency.nil?
        fail ArgumentError, 'currency cannot be nil'
      end

      if currency.to_s.length > 5
        fail ArgumentError, 'invalid value for "currency", the character length must be smaller than or equal to 5.'
      end

      if currency.to_s.length < 0
        fail ArgumentError, 'invalid value for "currency", the character length must be great than or equal to 0.'
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      if name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.nil?
        fail ArgumentError, 'status cannot be nil'
      end

      if status.to_s.length > 50
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 50.'
      end

      if status.to_s.length < 0
        fail ArgumentError, 'invalid value for "status", the character length must be great than or equal to 0.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if type.nil?
        fail ArgumentError, 'type cannot be nil'
      end

      if type.to_s.length > 50
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 50.'
      end

      if type.to_s.length < 0
        fail ArgumentError, 'invalid value for "type", the character length must be great than or equal to 0.'
      end

      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number_display == o.account_number_display &&
          account_owner == o.account_owner &&
          aggregation_attempt_date == o.aggregation_attempt_date &&
          aggregation_status_code == o.aggregation_status_code &&
          aggregation_success_date == o.aggregation_success_date &&
          currency == o.currency &&
          current_balance == o.current_balance &&
          id == o.id &&
          institution == o.institution &&
          institution_login_id == o.institution_login_id &&
          name == o.name &&
          real_account_number_last4 == o.real_account_number_last4 &&
          status == o.status &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number_display, account_owner, aggregation_attempt_date, aggregation_status_code, aggregation_success_date, currency, current_balance, id, institution, institution_login_id, name, real_account_number_last4, status, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
