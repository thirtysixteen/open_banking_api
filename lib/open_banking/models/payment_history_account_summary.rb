=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Account-level summary of transactions
  class PaymentHistoryAccountSummary
    # Last four digits of the account
    attr_accessor :account_number_display

    # Name of the account's institution
    attr_accessor :financial_institution

    # URL of institution icon
    attr_accessor :institution_icon

    # A currency code
    attr_accessor :currency

    # An account status
    attr_accessor :status

    # The account name from the institution
    attr_accessor :account_name

    attr_accessor :account_owner

    # The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account
    attr_accessor :account_type

    # Beginning balance of account
    attr_accessor :beginning_balance

    # Monthly average balance of account
    attr_accessor :average_monthly_balance

    # Current balance of account
    attr_accessor :current_balance

    # Begin date of account
    attr_accessor :begin_date

    # End date of account
    attr_accessor :end_date

    # Total of NSF transactions in this account
    attr_accessor :total_nonsufficient_funds

    # Days since the latest NSF transaction for this account
    attr_accessor :days_since_nonsufficient_funds

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_number_display' => :'accountNumberDisplay',
        :'financial_institution' => :'financialInstitution',
        :'institution_icon' => :'institutionIcon',
        :'currency' => :'currency',
        :'status' => :'status',
        :'account_name' => :'accountName',
        :'account_owner' => :'accountOwner',
        :'account_type' => :'accountType',
        :'beginning_balance' => :'beginningBalance',
        :'average_monthly_balance' => :'averageMonthlyBalance',
        :'current_balance' => :'currentBalance',
        :'begin_date' => :'beginDate',
        :'end_date' => :'endDate',
        :'total_nonsufficient_funds' => :'totalNonsufficientFunds',
        :'days_since_nonsufficient_funds' => :'daysSinceNonsufficientFunds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account_number_display' => :'String',
        :'financial_institution' => :'String',
        :'institution_icon' => :'String',
        :'currency' => :'String',
        :'status' => :'String',
        :'account_name' => :'String',
        :'account_owner' => :'PaymentHistoryAccountSummaryAccountOwner',
        :'account_type' => :'String',
        :'beginning_balance' => :'Float',
        :'average_monthly_balance' => :'Float',
        :'current_balance' => :'Float',
        :'begin_date' => :'String',
        :'end_date' => :'String',
        :'total_nonsufficient_funds' => :'Float',
        :'days_since_nonsufficient_funds' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::PaymentHistoryAccountSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::PaymentHistoryAccountSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account_number_display')
        self.account_number_display = attributes[:'account_number_display']
      else
        self.account_number_display = nil
      end

      if attributes.key?(:'financial_institution')
        self.financial_institution = attributes[:'financial_institution']
      else
        self.financial_institution = nil
      end

      if attributes.key?(:'institution_icon')
        self.institution_icon = attributes[:'institution_icon']
      else
        self.institution_icon = nil
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'account_name')
        self.account_name = attributes[:'account_name']
      else
        self.account_name = nil
      end

      if attributes.key?(:'account_owner')
        self.account_owner = attributes[:'account_owner']
      else
        self.account_owner = nil
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      else
        self.account_type = nil
      end

      if attributes.key?(:'beginning_balance')
        self.beginning_balance = attributes[:'beginning_balance']
      else
        self.beginning_balance = nil
      end

      if attributes.key?(:'average_monthly_balance')
        self.average_monthly_balance = attributes[:'average_monthly_balance']
      else
        self.average_monthly_balance = nil
      end

      if attributes.key?(:'current_balance')
        self.current_balance = attributes[:'current_balance']
      else
        self.current_balance = nil
      end

      if attributes.key?(:'begin_date')
        self.begin_date = attributes[:'begin_date']
      else
        self.begin_date = nil
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      else
        self.end_date = nil
      end

      if attributes.key?(:'total_nonsufficient_funds')
        self.total_nonsufficient_funds = attributes[:'total_nonsufficient_funds']
      end

      if attributes.key?(:'days_since_nonsufficient_funds')
        self.days_since_nonsufficient_funds = attributes[:'days_since_nonsufficient_funds']
      else
        self.days_since_nonsufficient_funds = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account_number_display.nil?
        invalid_properties.push('invalid value for "account_number_display", account_number_display cannot be nil.')
      end

      if @financial_institution.nil?
        invalid_properties.push('invalid value for "financial_institution", financial_institution cannot be nil.')
      end

      if @institution_icon.nil?
        invalid_properties.push('invalid value for "institution_icon", institution_icon cannot be nil.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @account_name.nil?
        invalid_properties.push('invalid value for "account_name", account_name cannot be nil.')
      end

      if @account_owner.nil?
        invalid_properties.push('invalid value for "account_owner", account_owner cannot be nil.')
      end

      if @account_type.nil?
        invalid_properties.push('invalid value for "account_type", account_type cannot be nil.')
      end

      if @beginning_balance.nil?
        invalid_properties.push('invalid value for "beginning_balance", beginning_balance cannot be nil.')
      end

      if @average_monthly_balance.nil?
        invalid_properties.push('invalid value for "average_monthly_balance", average_monthly_balance cannot be nil.')
      end

      if @current_balance.nil?
        invalid_properties.push('invalid value for "current_balance", current_balance cannot be nil.')
      end

      if @begin_date.nil?
        invalid_properties.push('invalid value for "begin_date", begin_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      if @days_since_nonsufficient_funds.nil?
        invalid_properties.push('invalid value for "days_since_nonsufficient_funds", days_since_nonsufficient_funds cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account_number_display.nil?
      return false if @financial_institution.nil?
      return false if @institution_icon.nil?
      return false if @currency.nil?
      return false if @status.nil?
      return false if @account_name.nil?
      return false if @account_owner.nil?
      return false if @account_type.nil?
      return false if @beginning_balance.nil?
      return false if @average_monthly_balance.nil?
      return false if @current_balance.nil?
      return false if @begin_date.nil?
      return false if @end_date.nil?
      return false if @days_since_nonsufficient_funds.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_number_display == o.account_number_display &&
          financial_institution == o.financial_institution &&
          institution_icon == o.institution_icon &&
          currency == o.currency &&
          status == o.status &&
          account_name == o.account_name &&
          account_owner == o.account_owner &&
          account_type == o.account_type &&
          beginning_balance == o.beginning_balance &&
          average_monthly_balance == o.average_monthly_balance &&
          current_balance == o.current_balance &&
          begin_date == o.begin_date &&
          end_date == o.end_date &&
          total_nonsufficient_funds == o.total_nonsufficient_funds &&
          days_since_nonsufficient_funds == o.days_since_nonsufficient_funds
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account_number_display, financial_institution, institution_icon, currency, status, account_name, account_owner, account_type, beginning_balance, average_monthly_balance, current_balance, begin_date, end_date, total_nonsufficient_funds, days_since_nonsufficient_funds].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
