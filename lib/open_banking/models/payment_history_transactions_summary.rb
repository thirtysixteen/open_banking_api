=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Top-level summary of transactions
  class PaymentHistoryTransactionsSummary
    # Total of NSF transactions
    attr_accessor :total_non_sufficient_funds

    # Monthly average of NSF transactions
    attr_accessor :average_monthly_non_sufficient_funds

    # Total of deposit transactions
    attr_accessor :total_deposits

    # Monthly average of deposit transactions
    attr_accessor :average_monthly_deposits

    # Total of withdrawals transactions
    attr_accessor :total_withdrawals

    # Monthly average of withdrawal transactions
    attr_accessor :average_monthly_withdrawals

    # ISO-8601 date of earliest transaction
    attr_accessor :begin_date

    # ISO-8601 date of latest transaction
    attr_accessor :end_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total_non_sufficient_funds' => :'totalNonSufficientFunds',
        :'average_monthly_non_sufficient_funds' => :'averageMonthlyNonSufficientFunds',
        :'total_deposits' => :'totalDeposits',
        :'average_monthly_deposits' => :'averageMonthlyDeposits',
        :'total_withdrawals' => :'totalWithdrawals',
        :'average_monthly_withdrawals' => :'averageMonthlyWithdrawals',
        :'begin_date' => :'beginDate',
        :'end_date' => :'endDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'total_non_sufficient_funds' => :'Float',
        :'average_monthly_non_sufficient_funds' => :'Float',
        :'total_deposits' => :'Float',
        :'average_monthly_deposits' => :'Float',
        :'total_withdrawals' => :'Float',
        :'average_monthly_withdrawals' => :'Float',
        :'begin_date' => :'String',
        :'end_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::PaymentHistoryTransactionsSummary` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::PaymentHistoryTransactionsSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'total_non_sufficient_funds')
        self.total_non_sufficient_funds = attributes[:'total_non_sufficient_funds']
      else
        self.total_non_sufficient_funds = nil
      end

      if attributes.key?(:'average_monthly_non_sufficient_funds')
        self.average_monthly_non_sufficient_funds = attributes[:'average_monthly_non_sufficient_funds']
      else
        self.average_monthly_non_sufficient_funds = nil
      end

      if attributes.key?(:'total_deposits')
        self.total_deposits = attributes[:'total_deposits']
      else
        self.total_deposits = nil
      end

      if attributes.key?(:'average_monthly_deposits')
        self.average_monthly_deposits = attributes[:'average_monthly_deposits']
      else
        self.average_monthly_deposits = nil
      end

      if attributes.key?(:'total_withdrawals')
        self.total_withdrawals = attributes[:'total_withdrawals']
      else
        self.total_withdrawals = nil
      end

      if attributes.key?(:'average_monthly_withdrawals')
        self.average_monthly_withdrawals = attributes[:'average_monthly_withdrawals']
      else
        self.average_monthly_withdrawals = nil
      end

      if attributes.key?(:'begin_date')
        self.begin_date = attributes[:'begin_date']
      else
        self.begin_date = nil
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      else
        self.end_date = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @total_non_sufficient_funds.nil?
        invalid_properties.push('invalid value for "total_non_sufficient_funds", total_non_sufficient_funds cannot be nil.')
      end

      if @average_monthly_non_sufficient_funds.nil?
        invalid_properties.push('invalid value for "average_monthly_non_sufficient_funds", average_monthly_non_sufficient_funds cannot be nil.')
      end

      if @total_deposits.nil?
        invalid_properties.push('invalid value for "total_deposits", total_deposits cannot be nil.')
      end

      if @average_monthly_deposits.nil?
        invalid_properties.push('invalid value for "average_monthly_deposits", average_monthly_deposits cannot be nil.')
      end

      if @total_withdrawals.nil?
        invalid_properties.push('invalid value for "total_withdrawals", total_withdrawals cannot be nil.')
      end

      if @average_monthly_withdrawals.nil?
        invalid_properties.push('invalid value for "average_monthly_withdrawals", average_monthly_withdrawals cannot be nil.')
      end

      if @begin_date.nil?
        invalid_properties.push('invalid value for "begin_date", begin_date cannot be nil.')
      end

      if @end_date.nil?
        invalid_properties.push('invalid value for "end_date", end_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @total_non_sufficient_funds.nil?
      return false if @average_monthly_non_sufficient_funds.nil?
      return false if @total_deposits.nil?
      return false if @average_monthly_deposits.nil?
      return false if @total_withdrawals.nil?
      return false if @average_monthly_withdrawals.nil?
      return false if @begin_date.nil?
      return false if @end_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total_non_sufficient_funds == o.total_non_sufficient_funds &&
          average_monthly_non_sufficient_funds == o.average_monthly_non_sufficient_funds &&
          total_deposits == o.total_deposits &&
          average_monthly_deposits == o.average_monthly_deposits &&
          total_withdrawals == o.total_withdrawals &&
          average_monthly_withdrawals == o.average_monthly_withdrawals &&
          begin_date == o.begin_date &&
          end_date == o.end_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [total_non_sufficient_funds, average_monthly_non_sufficient_funds, total_deposits, average_monthly_deposits, total_withdrawals, average_monthly_withdrawals, begin_date, end_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
