=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class CertifiedInstitution
    # The ID of a financial institution, represented as a number
    attr_accessor :id

    # The RSSD ID is a unique identifier assigned to financial institutions by the Federal Reserve. While the length of the RSSD ID varies by institution, it cannot exceed 10 numerical digits.
    attr_accessor :rssd

    # The name of the institution
    attr_accessor :name

    # \"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product
    attr_accessor :trans_agg

    # \"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product
    attr_accessor :ach

    # \"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product
    attr_accessor :state_agg

    # \"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product
    attr_accessor :voi

    # \"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product
    attr_accessor :voa

    # \"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product
    attr_accessor :aha

    # \"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product
    attr_accessor :avail_balance

    # \"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product
    attr_accessor :account_owner

    # \"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product
    attr_accessor :student_loan_data

    # \"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product
    attr_accessor :loan_payment_details

    # An array of child financial institutions
    attr_accessor :child_institutions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'rssd' => :'rssd',
        :'name' => :'name',
        :'trans_agg' => :'transAgg',
        :'ach' => :'ach',
        :'state_agg' => :'stateAgg',
        :'voi' => :'voi',
        :'voa' => :'voa',
        :'aha' => :'aha',
        :'avail_balance' => :'availBalance',
        :'account_owner' => :'accountOwner',
        :'student_loan_data' => :'studentLoanData',
        :'loan_payment_details' => :'loanPaymentDetails',
        :'child_institutions' => :'childInstitutions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'rssd' => :'Integer',
        :'name' => :'String',
        :'trans_agg' => :'Boolean',
        :'ach' => :'Boolean',
        :'state_agg' => :'Boolean',
        :'voi' => :'Boolean',
        :'voa' => :'Boolean',
        :'aha' => :'Boolean',
        :'avail_balance' => :'Boolean',
        :'account_owner' => :'Boolean',
        :'student_loan_data' => :'Boolean',
        :'loan_payment_details' => :'Boolean',
        :'child_institutions' => :'Array<ChildInstitution>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::CertifiedInstitution` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::CertifiedInstitution`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'rssd')
        self.rssd = attributes[:'rssd']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'trans_agg')
        self.trans_agg = attributes[:'trans_agg']
      else
        self.trans_agg = nil
      end

      if attributes.key?(:'ach')
        self.ach = attributes[:'ach']
      else
        self.ach = nil
      end

      if attributes.key?(:'state_agg')
        self.state_agg = attributes[:'state_agg']
      else
        self.state_agg = nil
      end

      if attributes.key?(:'voi')
        self.voi = attributes[:'voi']
      else
        self.voi = nil
      end

      if attributes.key?(:'voa')
        self.voa = attributes[:'voa']
      else
        self.voa = nil
      end

      if attributes.key?(:'aha')
        self.aha = attributes[:'aha']
      else
        self.aha = nil
      end

      if attributes.key?(:'avail_balance')
        self.avail_balance = attributes[:'avail_balance']
      else
        self.avail_balance = nil
      end

      if attributes.key?(:'account_owner')
        self.account_owner = attributes[:'account_owner']
      else
        self.account_owner = nil
      end

      if attributes.key?(:'student_loan_data')
        self.student_loan_data = attributes[:'student_loan_data']
      else
        self.student_loan_data = nil
      end

      if attributes.key?(:'loan_payment_details')
        self.loan_payment_details = attributes[:'loan_payment_details']
      else
        self.loan_payment_details = nil
      end

      if attributes.key?(:'child_institutions')
        if (value = attributes[:'child_institutions']).is_a?(Array)
          self.child_institutions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @trans_agg.nil?
        invalid_properties.push('invalid value for "trans_agg", trans_agg cannot be nil.')
      end

      if @ach.nil?
        invalid_properties.push('invalid value for "ach", ach cannot be nil.')
      end

      if @state_agg.nil?
        invalid_properties.push('invalid value for "state_agg", state_agg cannot be nil.')
      end

      if @voi.nil?
        invalid_properties.push('invalid value for "voi", voi cannot be nil.')
      end

      if @voa.nil?
        invalid_properties.push('invalid value for "voa", voa cannot be nil.')
      end

      if @aha.nil?
        invalid_properties.push('invalid value for "aha", aha cannot be nil.')
      end

      if @avail_balance.nil?
        invalid_properties.push('invalid value for "avail_balance", avail_balance cannot be nil.')
      end

      if @account_owner.nil?
        invalid_properties.push('invalid value for "account_owner", account_owner cannot be nil.')
      end

      if @student_loan_data.nil?
        invalid_properties.push('invalid value for "student_loan_data", student_loan_data cannot be nil.')
      end

      if @loan_payment_details.nil?
        invalid_properties.push('invalid value for "loan_payment_details", loan_payment_details cannot be nil.')
      end

      if !@child_institutions.nil? && @child_institutions.length < 0
        invalid_properties.push('invalid value for "child_institutions", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @trans_agg.nil?
      return false if @ach.nil?
      return false if @state_agg.nil?
      return false if @voi.nil?
      return false if @voa.nil?
      return false if @aha.nil?
      return false if @avail_balance.nil?
      return false if @account_owner.nil?
      return false if @student_loan_data.nil?
      return false if @loan_payment_details.nil?
      return false if !@child_institutions.nil? && @child_institutions.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] child_institutions Value to be assigned
    def child_institutions=(child_institutions)
      if child_institutions.nil?
        fail ArgumentError, 'child_institutions cannot be nil'
      end

      if child_institutions.length < 0
        fail ArgumentError, 'invalid value for "child_institutions", number of items must be greater than or equal to 0.'
      end

      @child_institutions = child_institutions
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          rssd == o.rssd &&
          name == o.name &&
          trans_agg == o.trans_agg &&
          ach == o.ach &&
          state_agg == o.state_agg &&
          voi == o.voi &&
          voa == o.voa &&
          aha == o.aha &&
          avail_balance == o.avail_balance &&
          account_owner == o.account_owner &&
          student_loan_data == o.student_loan_data &&
          loan_payment_details == o.loan_payment_details &&
          child_institutions == o.child_institutions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, rssd, name, trans_agg, ach, state_agg, voi, voa, aha, avail_balance, account_owner, student_loan_data, loan_payment_details, child_institutions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
