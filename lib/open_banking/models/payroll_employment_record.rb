=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class PayrollEmploymentRecord
    # Name of the employer as stated by the employer in the payroll system
    attr_accessor :employer_name

    # Employer identification number (EIN)
    attr_accessor :legal_entity_id

    # The original hired date of an employee at the company
    attr_accessor :original_hire_date

    # If an employee leaves the company and returns later, then the employer states the latest hire date at the company
    attr_accessor :latest_hire_date

    # The most recent pay periodâ€™s end date.
    attr_accessor :latest_pay_period_end_date

    # The most recent pay date from an employer
    attr_accessor :latest_pay_date

    # The number of days since an employee was last paid
    attr_accessor :days_since_last_pay

    # The number of pay cadences an employee has not been paid; determined by the pay frequency
    attr_accessor :number_pay_cadence_without_pay

    # The date an employee ended their employment at the company
    attr_accessor :employment_end_date

    # The length of time an employee has been employed with that employer in ISO 8601 format (e.g. P1Y6M0D)
    attr_accessor :employment_duration

    # Array of addresses
    attr_accessor :employer_address

    # 'Status codes: `A` - Active, `NLE` - No Longer Employed, `L` - Leave, `O` - Other', `I` - Inactive, `U` - Unknown'
    attr_accessor :employment_status_code

    # 'Status name: `Active`, `No Longer Employed`, `Leave` or `Other`, `Inactive`, or `Unknown`'
    attr_accessor :employment_status_name

    # Describes the employment status - it will be true if it is not directly stated by the employer, and false otherwise
    attr_accessor :derived_employment_status

    # The abbreviate code for the employment level names (workLevelName) that we receive from the employer
    attr_accessor :work_level_code

    # The employment level name is whatever we receive from the employer, such as full time, part time, temp, contractor, and more
    attr_accessor :work_level_name

    # The categorized work level status. Enumerations are:  * `Temporary`  * `Seasonal`  * `Retired`  * `Student`  * `Full Time`  * `Part Time`  * `Unspecified`  This is a new field, currently enabled only for testing reports. It will be added for all reports in August 2021. 
    attr_accessor :work_level_status

    # Employee job title
    attr_accessor :position_title

    # The length of time an employee has been employed at their current or latest position for this employment in ISO 8601 format (eg P1Y6M0D)
    attr_accessor :position_duration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'employer_name' => :'employerName',
        :'legal_entity_id' => :'legalEntityId',
        :'original_hire_date' => :'originalHireDate',
        :'latest_hire_date' => :'latestHireDate',
        :'latest_pay_period_end_date' => :'latestPayPeriodEndDate',
        :'latest_pay_date' => :'latestPayDate',
        :'days_since_last_pay' => :'daysSinceLastPay',
        :'number_pay_cadence_without_pay' => :'numberPayCadenceWithoutPay',
        :'employment_end_date' => :'employmentEndDate',
        :'employment_duration' => :'employmentDuration',
        :'employer_address' => :'employerAddress',
        :'employment_status_code' => :'employmentStatusCode',
        :'employment_status_name' => :'employmentStatusName',
        :'derived_employment_status' => :'derivedEmploymentStatus',
        :'work_level_code' => :'workLevelCode',
        :'work_level_name' => :'workLevelName',
        :'work_level_status' => :'workLevelStatus',
        :'position_title' => :'positionTitle',
        :'position_duration' => :'positionDuration'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'employer_name' => :'String',
        :'legal_entity_id' => :'String',
        :'original_hire_date' => :'Integer',
        :'latest_hire_date' => :'Integer',
        :'latest_pay_period_end_date' => :'Integer',
        :'latest_pay_date' => :'Integer',
        :'days_since_last_pay' => :'Integer',
        :'number_pay_cadence_without_pay' => :'Integer',
        :'employment_end_date' => :'Integer',
        :'employment_duration' => :'String',
        :'employer_address' => :'Array<PayrollEmployerAddress>',
        :'employment_status_code' => :'String',
        :'employment_status_name' => :'String',
        :'derived_employment_status' => :'Boolean',
        :'work_level_code' => :'String',
        :'work_level_name' => :'String',
        :'work_level_status' => :'String',
        :'position_title' => :'String',
        :'position_duration' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::PayrollEmploymentRecord` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::PayrollEmploymentRecord`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'employer_name')
        self.employer_name = attributes[:'employer_name']
      else
        self.employer_name = nil
      end

      if attributes.key?(:'legal_entity_id')
        self.legal_entity_id = attributes[:'legal_entity_id']
      end

      if attributes.key?(:'original_hire_date')
        self.original_hire_date = attributes[:'original_hire_date']
      end

      if attributes.key?(:'latest_hire_date')
        self.latest_hire_date = attributes[:'latest_hire_date']
      end

      if attributes.key?(:'latest_pay_period_end_date')
        self.latest_pay_period_end_date = attributes[:'latest_pay_period_end_date']
      end

      if attributes.key?(:'latest_pay_date')
        self.latest_pay_date = attributes[:'latest_pay_date']
      end

      if attributes.key?(:'days_since_last_pay')
        self.days_since_last_pay = attributes[:'days_since_last_pay']
      end

      if attributes.key?(:'number_pay_cadence_without_pay')
        self.number_pay_cadence_without_pay = attributes[:'number_pay_cadence_without_pay']
      end

      if attributes.key?(:'employment_end_date')
        self.employment_end_date = attributes[:'employment_end_date']
      end

      if attributes.key?(:'employment_duration')
        self.employment_duration = attributes[:'employment_duration']
      end

      if attributes.key?(:'employer_address')
        if (value = attributes[:'employer_address']).is_a?(Array)
          self.employer_address = value
        end
      end

      if attributes.key?(:'employment_status_code')
        self.employment_status_code = attributes[:'employment_status_code']
      else
        self.employment_status_code = nil
      end

      if attributes.key?(:'employment_status_name')
        self.employment_status_name = attributes[:'employment_status_name']
      else
        self.employment_status_name = nil
      end

      if attributes.key?(:'derived_employment_status')
        self.derived_employment_status = attributes[:'derived_employment_status']
      end

      if attributes.key?(:'work_level_code')
        self.work_level_code = attributes[:'work_level_code']
      end

      if attributes.key?(:'work_level_name')
        self.work_level_name = attributes[:'work_level_name']
      end

      if attributes.key?(:'work_level_status')
        self.work_level_status = attributes[:'work_level_status']
      else
        self.work_level_status = nil
      end

      if attributes.key?(:'position_title')
        self.position_title = attributes[:'position_title']
      end

      if attributes.key?(:'position_duration')
        self.position_duration = attributes[:'position_duration']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @employer_name.nil?
        invalid_properties.push('invalid value for "employer_name", employer_name cannot be nil.')
      end

      if @employment_status_code.nil?
        invalid_properties.push('invalid value for "employment_status_code", employment_status_code cannot be nil.')
      end

      if @employment_status_name.nil?
        invalid_properties.push('invalid value for "employment_status_name", employment_status_name cannot be nil.')
      end

      if @work_level_status.nil?
        invalid_properties.push('invalid value for "work_level_status", work_level_status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @employer_name.nil?
      return false if @employment_status_code.nil?
      return false if @employment_status_name.nil?
      return false if @work_level_status.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          employer_name == o.employer_name &&
          legal_entity_id == o.legal_entity_id &&
          original_hire_date == o.original_hire_date &&
          latest_hire_date == o.latest_hire_date &&
          latest_pay_period_end_date == o.latest_pay_period_end_date &&
          latest_pay_date == o.latest_pay_date &&
          days_since_last_pay == o.days_since_last_pay &&
          number_pay_cadence_without_pay == o.number_pay_cadence_without_pay &&
          employment_end_date == o.employment_end_date &&
          employment_duration == o.employment_duration &&
          employer_address == o.employer_address &&
          employment_status_code == o.employment_status_code &&
          employment_status_name == o.employment_status_name &&
          derived_employment_status == o.derived_employment_status &&
          work_level_code == o.work_level_code &&
          work_level_name == o.work_level_name &&
          work_level_status == o.work_level_status &&
          position_title == o.position_title &&
          position_duration == o.position_duration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [employer_name, legal_entity_id, original_hire_date, latest_hire_date, latest_pay_period_end_date, latest_pay_date, days_since_last_pay, number_pay_cadence_without_pay, employment_end_date, employment_duration, employer_address, employment_status_code, employment_status_name, derived_employment_status, work_level_code, work_level_name, work_level_status, position_title, position_duration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
