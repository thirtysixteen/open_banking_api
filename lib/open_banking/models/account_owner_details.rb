=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  # Owner of a customer account
  class AccountOwnerDetails
    # The type of relationship to the account: * \"AUTHORIZED_USER\"  * \"BUSINESS\"  * \"FOR_BENEFIT_OF_PRIMARY\"  * \"FOR_BENEFIT_OF_PRIMARY_JOINT_RESTRICTED\"  * \"FOR_BENEFIT_OF_SECONDARY\"  * \"FOR_BENEFIT_OF_SECONDARY_JOINT_RESTRICTED\"  * \"FOR_BENEFIT_OF_SOLE_OWNER_RESTRICTED\"  * \"POWER_OF_ATTORNEY\"  * \"PRIMARY_JOINT_TENANTS\"  * \"PRIMARY\"  * \"PRIMARY_BORROWER\"  * \"PRIMARY_JOINT\"  * \"SECONDARY\"  * \"SECONDARY_JOINT_TENANTS\"  * \"SECONDARY_BORROWER\"  * \"SECONDARY_JOINT\"  * \"SOLE_OWNER\"  * \"TRUSTEE\"  * \"UNIFORM_TRANSFER_TO_MINOR\"
    attr_accessor :relationship

    # The full name of the account owner. Multiple account owners are returned in one string per the source data from the institution.
    attr_accessor :owner_name

    # The first name of the account holder
    attr_accessor :first_name

    # The middle name of the account holder
    attr_accessor :middle_name

    # The last name of the account holder
    attr_accessor :last_name

    # A generational or academic suffix
    attr_accessor :suffix

    # The classification of the account holder: * \"person / personal / home\" * \"business\" * \"other\"
    attr_accessor :name_classification

    # The confidence score (between zero and one) of the name classification.
    attr_accessor :name_classificationconfidencescore

    # List of addresses
    attr_accessor :addresses

    # List of emails
    attr_accessor :emails

    # List of phones
    attr_accessor :phones

    # List of account owner documentation
    attr_accessor :documentations

    attr_accessor :identity_insights

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'relationship' => :'relationship',
        :'owner_name' => :'ownerName',
        :'first_name' => :'firstName',
        :'middle_name' => :'middleName',
        :'last_name' => :'lastName',
        :'suffix' => :'suffix',
        :'name_classification' => :'nameClassification',
        :'name_classificationconfidencescore' => :'nameClassificationconfidencescore',
        :'addresses' => :'addresses',
        :'emails' => :'emails',
        :'phones' => :'phones',
        :'documentations' => :'documentations',
        :'identity_insights' => :'identityInsights'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'relationship' => :'String',
        :'owner_name' => :'String',
        :'first_name' => :'String',
        :'middle_name' => :'String',
        :'last_name' => :'String',
        :'suffix' => :'String',
        :'name_classification' => :'String',
        :'name_classificationconfidencescore' => :'Float',
        :'addresses' => :'Array<AccountOwnerAddress>',
        :'emails' => :'Array<AccountOwnerEmail>',
        :'phones' => :'Array<AccountOwnerPhone>',
        :'documentations' => :'Array<AccountOwnerDocumentation>',
        :'identity_insights' => :'AccountOwnerIdentityInsights'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::AccountOwnerDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::AccountOwnerDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'owner_name')
        self.owner_name = attributes[:'owner_name']
      else
        self.owner_name = nil
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end

      if attributes.key?(:'name_classification')
        self.name_classification = attributes[:'name_classification']
      end

      if attributes.key?(:'name_classificationconfidencescore')
        self.name_classificationconfidencescore = attributes[:'name_classificationconfidencescore']
      end

      if attributes.key?(:'addresses')
        if (value = attributes[:'addresses']).is_a?(Array)
          self.addresses = value
        end
      else
        self.addresses = nil
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'phones')
        if (value = attributes[:'phones']).is_a?(Array)
          self.phones = value
        end
      end

      if attributes.key?(:'documentations')
        if (value = attributes[:'documentations']).is_a?(Array)
          self.documentations = value
        end
      end

      if attributes.key?(:'identity_insights')
        self.identity_insights = attributes[:'identity_insights']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @owner_name.nil?
        invalid_properties.push('invalid value for "owner_name", owner_name cannot be nil.')
      end

      if !@name_classificationconfidencescore.nil? && @name_classificationconfidencescore > 1.0
        invalid_properties.push('invalid value for "name_classificationconfidencescore", must be smaller than or equal to 1.0.')
      end

      if !@name_classificationconfidencescore.nil? && @name_classificationconfidencescore < 0.0
        invalid_properties.push('invalid value for "name_classificationconfidencescore", must be greater than or equal to 0.0.')
      end

      if @addresses.nil?
        invalid_properties.push('invalid value for "addresses", addresses cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @owner_name.nil?
      return false if !@name_classificationconfidencescore.nil? && @name_classificationconfidencescore > 1.0
      return false if !@name_classificationconfidencescore.nil? && @name_classificationconfidencescore < 0.0
      return false if @addresses.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name_classificationconfidencescore Value to be assigned
    def name_classificationconfidencescore=(name_classificationconfidencescore)
      if name_classificationconfidencescore.nil?
        fail ArgumentError, 'name_classificationconfidencescore cannot be nil'
      end

      if name_classificationconfidencescore > 1.0
        fail ArgumentError, 'invalid value for "name_classificationconfidencescore", must be smaller than or equal to 1.0.'
      end

      if name_classificationconfidencescore < 0.0
        fail ArgumentError, 'invalid value for "name_classificationconfidencescore", must be greater than or equal to 0.0.'
      end

      @name_classificationconfidencescore = name_classificationconfidencescore
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          relationship == o.relationship &&
          owner_name == o.owner_name &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name &&
          suffix == o.suffix &&
          name_classification == o.name_classification &&
          name_classificationconfidencescore == o.name_classificationconfidencescore &&
          addresses == o.addresses &&
          emails == o.emails &&
          phones == o.phones &&
          documentations == o.documentations &&
          identity_insights == o.identity_insights
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [relationship, owner_name, first_name, middle_name, last_name, suffix, name_classification, name_classificationconfidencescore, addresses, emails, phones, documentations, identity_insights].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
