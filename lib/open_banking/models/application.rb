=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class Application
    # A short description of the app. This will be visible to end users in the FI interface.
    attr_accessor :app_description

    # The name of the application assigned to the customer
    attr_accessor :app_name

    # An URL for the app. This will be visible to end users in the FI interface.
    attr_accessor :app_url

    # Address line 1
    attr_accessor :owner_address_line1

    # Address line 2
    attr_accessor :owner_address_line2

    # City for the business entity that owns the app. Information for registration purposes only and not given to the end user.
    attr_accessor :owner_city

    # Country for the  business entity that owns the app. Information for registration purposes only and not given to the end user.
    attr_accessor :owner_country

    # Business name for the business entity that owns the app. Information for registration purposes only and not given to the end user.
    attr_accessor :owner_name

    # Zip code for the business entity that owns the app. Information for registration purposes only and not given to the end user.
    attr_accessor :owner_postal_code

    # State for the business entity that owns the app. Information for registration purposes only and not given to the end user.
    attr_accessor :owner_state

    # An app logo passed as a Base64 encoded image (1:1 SVG file, must be less than 50KB)
    attr_accessor :image

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_description' => :'appDescription',
        :'app_name' => :'appName',
        :'app_url' => :'appUrl',
        :'owner_address_line1' => :'ownerAddressLine1',
        :'owner_address_line2' => :'ownerAddressLine2',
        :'owner_city' => :'ownerCity',
        :'owner_country' => :'ownerCountry',
        :'owner_name' => :'ownerName',
        :'owner_postal_code' => :'ownerPostalCode',
        :'owner_state' => :'ownerState',
        :'image' => :'image'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'app_description' => :'String',
        :'app_name' => :'String',
        :'app_url' => :'String',
        :'owner_address_line1' => :'String',
        :'owner_address_line2' => :'String',
        :'owner_city' => :'String',
        :'owner_country' => :'String',
        :'owner_name' => :'String',
        :'owner_postal_code' => :'String',
        :'owner_state' => :'String',
        :'image' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::Application` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::Application`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'app_description')
        self.app_description = attributes[:'app_description']
      else
        self.app_description = nil
      end

      if attributes.key?(:'app_name')
        self.app_name = attributes[:'app_name']
      else
        self.app_name = nil
      end

      if attributes.key?(:'app_url')
        self.app_url = attributes[:'app_url']
      else
        self.app_url = nil
      end

      if attributes.key?(:'owner_address_line1')
        self.owner_address_line1 = attributes[:'owner_address_line1']
      else
        self.owner_address_line1 = nil
      end

      if attributes.key?(:'owner_address_line2')
        self.owner_address_line2 = attributes[:'owner_address_line2']
      else
        self.owner_address_line2 = nil
      end

      if attributes.key?(:'owner_city')
        self.owner_city = attributes[:'owner_city']
      else
        self.owner_city = nil
      end

      if attributes.key?(:'owner_country')
        self.owner_country = attributes[:'owner_country']
      else
        self.owner_country = nil
      end

      if attributes.key?(:'owner_name')
        self.owner_name = attributes[:'owner_name']
      else
        self.owner_name = nil
      end

      if attributes.key?(:'owner_postal_code')
        self.owner_postal_code = attributes[:'owner_postal_code']
      else
        self.owner_postal_code = nil
      end

      if attributes.key?(:'owner_state')
        self.owner_state = attributes[:'owner_state']
      else
        self.owner_state = nil
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      else
        self.image = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @app_description.nil?
        invalid_properties.push('invalid value for "app_description", app_description cannot be nil.')
      end

      if @app_name.nil?
        invalid_properties.push('invalid value for "app_name", app_name cannot be nil.')
      end

      if @app_url.nil?
        invalid_properties.push('invalid value for "app_url", app_url cannot be nil.')
      end

      if @owner_address_line1.nil?
        invalid_properties.push('invalid value for "owner_address_line1", owner_address_line1 cannot be nil.')
      end

      if @owner_address_line2.nil?
        invalid_properties.push('invalid value for "owner_address_line2", owner_address_line2 cannot be nil.')
      end

      if @owner_city.nil?
        invalid_properties.push('invalid value for "owner_city", owner_city cannot be nil.')
      end

      if @owner_country.nil?
        invalid_properties.push('invalid value for "owner_country", owner_country cannot be nil.')
      end

      if @owner_name.nil?
        invalid_properties.push('invalid value for "owner_name", owner_name cannot be nil.')
      end

      if @owner_postal_code.nil?
        invalid_properties.push('invalid value for "owner_postal_code", owner_postal_code cannot be nil.')
      end

      if @owner_state.nil?
        invalid_properties.push('invalid value for "owner_state", owner_state cannot be nil.')
      end

      if @image.nil?
        invalid_properties.push('invalid value for "image", image cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @app_description.nil?
      return false if @app_name.nil?
      return false if @app_url.nil?
      return false if @owner_address_line1.nil?
      return false if @owner_address_line2.nil?
      return false if @owner_city.nil?
      return false if @owner_country.nil?
      return false if @owner_name.nil?
      return false if @owner_postal_code.nil?
      return false if @owner_state.nil?
      return false if @image.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_description == o.app_description &&
          app_name == o.app_name &&
          app_url == o.app_url &&
          owner_address_line1 == o.owner_address_line1 &&
          owner_address_line2 == o.owner_address_line2 &&
          owner_city == o.owner_city &&
          owner_country == o.owner_country &&
          owner_name == o.owner_name &&
          owner_postal_code == o.owner_postal_code &&
          owner_state == o.owner_state &&
          image == o.image
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [app_description, app_name, app_url, owner_address_line1, owner_address_line2, owner_city, owner_country, owner_name, owner_postal_code, owner_state, image].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
