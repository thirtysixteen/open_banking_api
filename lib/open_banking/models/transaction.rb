=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'date'
require 'time'

module OpenBanking
  class Transaction
    # A transaction ID
    attr_accessor :id

    # The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
    attr_accessor :amount

    # An account ID represented as a number
    attr_accessor :account_id

    # A customer ID represented as a number. See Add Customer API for how to create a customer ID.
    attr_accessor :customer_id

    # One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
    attr_accessor :status

    # The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one
    attr_accessor :description

    # The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.
    attr_accessor :memo

    # If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\"
    attr_accessor :type

    # A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :transaction_date

    # A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :posted_date

    # A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :created_date

    # A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :first_effective_date

    # A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :effective_date

    # A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
    attr_accessor :option_expire_date

    # The check number of the transaction
    attr_accessor :check_num

    # The portion of the transaction allocated to escrow
    attr_accessor :escrow_amount

    # The portion of the overall transaction amount applied to fees
    attr_accessor :fee_amount

    # Temporarily hold funds if you overpay or underpay your monthly payment
    attr_accessor :suspense_amount

    # The portion of the transaction allocated to interest
    attr_accessor :interest_amount

    # The portion of the transaction allocated to principal
    attr_accessor :principal_amount

    # The strike price of the option contract
    attr_accessor :option_strike_price

    # The number of units (individual shares) in the transaction
    attr_accessor :unit_quantity

    # Share price for the investment unit: stocks, mutual funds, ETFs
    attr_accessor :unit_price

    attr_accessor :categorization

    # The ending balance after the transaction was posted
    attr_accessor :running_balance_amount

    # The type of sub account the funds came from
    attr_accessor :subaccount_security_type

    # Transaction commission
    attr_accessor :commission_amount

    # Ticker symbol for the investment related to the transaction
    attr_accessor :ticker

    # Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values: * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendReinvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\"
    attr_accessor :investment_transaction_type

    # Taxes applicable to the investment trade
    attr_accessor :taxes_amount

    # If the foreign amount value is present then this is the currency code of that foreign amount
    attr_accessor :currency_symbol

    # Capital gains applied in short, long, or miscellaneous terms for tax purposes
    attr_accessor :income_type

    # Denominator of the stock split for the transaction
    attr_accessor :split_denominator

    # Numerator of the stock split for the transaction
    attr_accessor :split_numerator

    # Shares per contract of the underlying stock option
    attr_accessor :shares_per_contract

    # The sub account where the funds came from
    attr_accessor :sub_account_fund

    # The security ID of the transaction
    attr_accessor :security_id

    # The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\"
    attr_accessor :security_id_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'amount' => :'amount',
        :'account_id' => :'accountId',
        :'customer_id' => :'customerId',
        :'status' => :'status',
        :'description' => :'description',
        :'memo' => :'memo',
        :'type' => :'type',
        :'transaction_date' => :'transactionDate',
        :'posted_date' => :'postedDate',
        :'created_date' => :'createdDate',
        :'first_effective_date' => :'firstEffectiveDate',
        :'effective_date' => :'effectiveDate',
        :'option_expire_date' => :'optionExpireDate',
        :'check_num' => :'checkNum',
        :'escrow_amount' => :'escrowAmount',
        :'fee_amount' => :'feeAmount',
        :'suspense_amount' => :'suspenseAmount',
        :'interest_amount' => :'interestAmount',
        :'principal_amount' => :'principalAmount',
        :'option_strike_price' => :'optionStrikePrice',
        :'unit_quantity' => :'unitQuantity',
        :'unit_price' => :'unitPrice',
        :'categorization' => :'categorization',
        :'running_balance_amount' => :'runningBalanceAmount',
        :'subaccount_security_type' => :'subaccountSecurityType',
        :'commission_amount' => :'commissionAmount',
        :'ticker' => :'ticker',
        :'investment_transaction_type' => :'investmentTransactionType',
        :'taxes_amount' => :'taxesAmount',
        :'currency_symbol' => :'currencySymbol',
        :'income_type' => :'incomeType',
        :'split_denominator' => :'splitDenominator',
        :'split_numerator' => :'splitNumerator',
        :'shares_per_contract' => :'sharesPerContract',
        :'sub_account_fund' => :'subAccountFund',
        :'security_id' => :'securityId',
        :'security_id_type' => :'securityIdType'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'amount' => :'Float',
        :'account_id' => :'Integer',
        :'customer_id' => :'Integer',
        :'status' => :'String',
        :'description' => :'String',
        :'memo' => :'String',
        :'type' => :'String',
        :'transaction_date' => :'Integer',
        :'posted_date' => :'Integer',
        :'created_date' => :'Integer',
        :'first_effective_date' => :'Integer',
        :'effective_date' => :'Integer',
        :'option_expire_date' => :'Integer',
        :'check_num' => :'String',
        :'escrow_amount' => :'Float',
        :'fee_amount' => :'Float',
        :'suspense_amount' => :'Float',
        :'interest_amount' => :'Float',
        :'principal_amount' => :'Float',
        :'option_strike_price' => :'Float',
        :'unit_quantity' => :'Integer',
        :'unit_price' => :'Float',
        :'categorization' => :'Categorization',
        :'running_balance_amount' => :'Float',
        :'subaccount_security_type' => :'String',
        :'commission_amount' => :'Integer',
        :'ticker' => :'String',
        :'investment_transaction_type' => :'String',
        :'taxes_amount' => :'Integer',
        :'currency_symbol' => :'String',
        :'income_type' => :'String',
        :'split_denominator' => :'Float',
        :'split_numerator' => :'Float',
        :'shares_per_contract' => :'Float',
        :'sub_account_fund' => :'String',
        :'security_id' => :'String',
        :'security_id_type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenBanking::Transaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenBanking::Transaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = nil
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      else
        self.account_id = nil
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      else
        self.customer_id = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      else
        self.description = nil
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'posted_date')
        self.posted_date = attributes[:'posted_date']
      end

      if attributes.key?(:'created_date')
        self.created_date = attributes[:'created_date']
      else
        self.created_date = nil
      end

      if attributes.key?(:'first_effective_date')
        self.first_effective_date = attributes[:'first_effective_date']
      end

      if attributes.key?(:'effective_date')
        self.effective_date = attributes[:'effective_date']
      end

      if attributes.key?(:'option_expire_date')
        self.option_expire_date = attributes[:'option_expire_date']
      end

      if attributes.key?(:'check_num')
        self.check_num = attributes[:'check_num']
      end

      if attributes.key?(:'escrow_amount')
        self.escrow_amount = attributes[:'escrow_amount']
      end

      if attributes.key?(:'fee_amount')
        self.fee_amount = attributes[:'fee_amount']
      end

      if attributes.key?(:'suspense_amount')
        self.suspense_amount = attributes[:'suspense_amount']
      end

      if attributes.key?(:'interest_amount')
        self.interest_amount = attributes[:'interest_amount']
      end

      if attributes.key?(:'principal_amount')
        self.principal_amount = attributes[:'principal_amount']
      end

      if attributes.key?(:'option_strike_price')
        self.option_strike_price = attributes[:'option_strike_price']
      end

      if attributes.key?(:'unit_quantity')
        self.unit_quantity = attributes[:'unit_quantity']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'categorization')
        self.categorization = attributes[:'categorization']
      end

      if attributes.key?(:'running_balance_amount')
        self.running_balance_amount = attributes[:'running_balance_amount']
      end

      if attributes.key?(:'subaccount_security_type')
        self.subaccount_security_type = attributes[:'subaccount_security_type']
      end

      if attributes.key?(:'commission_amount')
        self.commission_amount = attributes[:'commission_amount']
      end

      if attributes.key?(:'ticker')
        self.ticker = attributes[:'ticker']
      end

      if attributes.key?(:'investment_transaction_type')
        self.investment_transaction_type = attributes[:'investment_transaction_type']
      end

      if attributes.key?(:'taxes_amount')
        self.taxes_amount = attributes[:'taxes_amount']
      end

      if attributes.key?(:'currency_symbol')
        self.currency_symbol = attributes[:'currency_symbol']
      end

      if attributes.key?(:'income_type')
        self.income_type = attributes[:'income_type']
      end

      if attributes.key?(:'split_denominator')
        self.split_denominator = attributes[:'split_denominator']
      end

      if attributes.key?(:'split_numerator')
        self.split_numerator = attributes[:'split_numerator']
      end

      if attributes.key?(:'shares_per_contract')
        self.shares_per_contract = attributes[:'shares_per_contract']
      end

      if attributes.key?(:'sub_account_fund')
        self.sub_account_fund = attributes[:'sub_account_fund']
      end

      if attributes.key?(:'security_id')
        self.security_id = attributes[:'security_id']
      end

      if attributes.key?(:'security_id_type')
        self.security_id_type = attributes[:'security_id_type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @amount.nil?
      return false if @account_id.nil?
      return false if @customer_id.nil?
      return false if @status.nil?
      return false if @description.nil?
      return false if @created_date.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          amount == o.amount &&
          account_id == o.account_id &&
          customer_id == o.customer_id &&
          status == o.status &&
          description == o.description &&
          memo == o.memo &&
          type == o.type &&
          transaction_date == o.transaction_date &&
          posted_date == o.posted_date &&
          created_date == o.created_date &&
          first_effective_date == o.first_effective_date &&
          effective_date == o.effective_date &&
          option_expire_date == o.option_expire_date &&
          check_num == o.check_num &&
          escrow_amount == o.escrow_amount &&
          fee_amount == o.fee_amount &&
          suspense_amount == o.suspense_amount &&
          interest_amount == o.interest_amount &&
          principal_amount == o.principal_amount &&
          option_strike_price == o.option_strike_price &&
          unit_quantity == o.unit_quantity &&
          unit_price == o.unit_price &&
          categorization == o.categorization &&
          running_balance_amount == o.running_balance_amount &&
          subaccount_security_type == o.subaccount_security_type &&
          commission_amount == o.commission_amount &&
          ticker == o.ticker &&
          investment_transaction_type == o.investment_transaction_type &&
          taxes_amount == o.taxes_amount &&
          currency_symbol == o.currency_symbol &&
          income_type == o.income_type &&
          split_denominator == o.split_denominator &&
          split_numerator == o.split_numerator &&
          shares_per_contract == o.shares_per_contract &&
          sub_account_fund == o.sub_account_fund &&
          security_id == o.security_id &&
          security_id_type == o.security_id_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, amount, account_id, customer_id, status, description, memo, type, transaction_date, posted_date, created_date, first_effective_date, effective_date, option_expire_date, check_num, escrow_amount, fee_amount, suspense_amount, interest_amount, principal_amount, option_strike_price, unit_quantity, unit_price, categorization, running_balance_amount, subaccount_security_type, commission_amount, ticker, investment_transaction_type, taxes_amount, currency_symbol, income_type, split_denominator, split_numerator, shares_per_contract, sub_account_fund, security_id, security_id_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenBanking.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
