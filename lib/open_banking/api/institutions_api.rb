=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class InstitutionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Certified Institutions
    # Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [CertifiedInstitutions]
    def get_certified_institutions(opts = {})
      data, _status_code, _headers = get_certified_institutions_with_http_info(opts)
      data
    end

    # Get Certified Institutions
    # Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [Array<(CertifiedInstitutions, Integer, Hash)>] CertifiedInstitutions data, response status code and response headers
    def get_certified_institutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstitutionsApi.get_certified_institutions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.get_certified_institutions, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/institution/v2/certifiedInstitutions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'supportedCountries'] = @api_client.build_collection_param(opts[:'supported_countries'], :csv) if !opts[:'supported_countries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CertifiedInstitutions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"InstitutionsApi.get_certified_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#get_certified_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Certified Institutions With RSSD
    # Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [CertifiedInstitutions]
    def get_certified_institutions_with_rssd(opts = {})
      data, _status_code, _headers = get_certified_institutions_with_rssd_with_http_info(opts)
      data
    end

    # Get Certified Institutions With RSSD
    # Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [Array<(CertifiedInstitutions, Integer, Hash)>] CertifiedInstitutions data, response status code and response headers
    def get_certified_institutions_with_rssd_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstitutionsApi.get_certified_institutions_with_rssd ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.get_certified_institutions_with_rssd, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/institution/v2/certifiedInstitutions/rssd'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'supportedCountries'] = @api_client.build_collection_param(opts[:'supported_countries'], :csv) if !opts[:'supported_countries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CertifiedInstitutions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"InstitutionsApi.get_certified_institutions_with_rssd",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#get_certified_institutions_with_rssd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Institution by ID
    # Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [InstitutionWrapper]
    def get_institution(institution_id, opts = {})
      data, _status_code, _headers = get_institution_with_http_info(institution_id, opts)
      data
    end

    # Get Institution by ID
    # Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstitutionWrapper, Integer, Hash)>] InstitutionWrapper data, response status code and response headers
    def get_institution_with_http_info(institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstitutionsApi.get_institution ...'
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling InstitutionsApi.get_institution"
      end
      # resource path
      local_var_path = '/institution/v2/institutions/{institutionId}'.sub('{' + 'institutionId' + '}', CGI.escape(institution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionWrapper'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"InstitutionsApi.get_institution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#get_institution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Institution Branding by ID
    # Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [BrandingWrapper]
    def get_institution_branding(institution_id, opts = {})
      data, _status_code, _headers = get_institution_branding_with_http_info(institution_id, opts)
      data
    end

    # Get Institution Branding by ID
    # Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrandingWrapper, Integer, Hash)>] BrandingWrapper data, response status code and response headers
    def get_institution_branding_with_http_info(institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstitutionsApi.get_institution_branding ...'
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling InstitutionsApi.get_institution_branding"
      end
      # resource path
      local_var_path = '/institution/v2/institutions/{institutionId}/branding'.sub('{' + 'institutionId' + '}', CGI.escape(institution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrandingWrapper'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"InstitutionsApi.get_institution_branding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#get_institution_branding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Institutions
    # Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [Institutions]
    def get_institutions(opts = {})
      data, _status_code, _headers = get_institutions_with_http_info(opts)
      data
    end

    # Get Institutions
    # Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [String] :type A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
    # @option opts [Array<String>] :supported_countries A list of country codes, &#39;*&#39; for all countries.
    # @return [Array<(Institutions, Integer, Hash)>] Institutions data, response status code and response headers
    def get_institutions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InstitutionsApi.get_institutions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling InstitutionsApi.get_institutions, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/institution/v2/institutions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'supportedCountries'] = @api_client.build_collection_param(opts[:'supported_countries'], :csv) if !opts[:'supported_countries'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Institutions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"InstitutionsApi.get_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InstitutionsApi#get_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
