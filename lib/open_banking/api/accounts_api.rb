=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Access to Customer Account by ID
    # This will delete access to a specific account only. If the given account is not the last account, then partners and their customers will have the flexibility to continue to access data from other connected accounts using the consented (Oauth) token for the customer. The customer data on that specific account will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. â€‹ _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer_account(customer_id, account_id, opts = {})
      delete_customer_account_with_http_info(customer_id, account_id, opts)
      nil
    end

    # Delete Access to Customer Account by ID
    # This will delete access to a specific account only. If the given account is not the last account, then partners and their customers will have the flexibility to continue to access data from other connected accounts using the consented (Oauth) token for the customer. The customer data on that specific account will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. â€‹ _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customer_account_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_customer_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.delete_customer_account"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_customer_account"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts/{accountId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_customer_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_customer_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Access to Customer Accounts by Institution Login ID
    # Delete access to all customer accounts for a given FI.â€‹ This will delete access to the underlying account(s) under a given Institution Login ID. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer_accounts_by_institution_login(customer_id, institution_login_id, opts = {})
      delete_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts)
      nil
    end

    # Delete Access to Customer Accounts by Institution Login ID
    # Delete access to all customer accounts for a given FI.â€‹ This will delete access to the underlying account(s) under a given Institution Login ID. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_customer_accounts_by_institution_login ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.delete_customer_accounts_by_institution_login"
      end
      # verify the required parameter 'institution_login_id' is set
      if @api_client.config.client_side_validation && institution_login_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_login_id' when calling AccountsApi.delete_customer_accounts_by_institution_login"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionLoginId' + '}', CGI.escape(institution_login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_customer_accounts_by_institution_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_customer_accounts_by_institution_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Account by ID
    # Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccount]
    def get_customer_account(customer_id, account_id, opts = {})
      data, _status_code, _headers = get_customer_account_with_http_info(customer_id, account_id, opts)
      data
    end

    # Get Customer Account by ID
    # Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccount, Integer, Hash)>] CustomerAccount data, response status code and response headers
    def get_customer_account_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_customer_account ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_customer_account"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_customer_account"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/{customerId}/accounts/{accountId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccount'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_customer_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_customer_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Accounts
    # Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status A filter to fetch account in the given status
    # @option opts [String] :account_type A filter to fetch accounts for the given type. Currently supported types: \&quot;ava\&quot;
    # @return [CustomerAccounts]
    def get_customer_accounts(customer_id, opts = {})
      data, _status_code, _headers = get_customer_accounts_with_http_info(customer_id, opts)
      data
    end

    # Get Customer Accounts
    # Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status A filter to fetch account in the given status
    # @option opts [String] :account_type A filter to fetch accounts for the given type. Currently supported types: \&quot;ava\&quot;
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def get_customer_accounts_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_customer_accounts ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_customer_accounts"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'account_type'] = opts[:'account_type'] if !opts[:'account_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_customer_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_customer_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Accounts by Institution ID
    # Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccounts]
    def get_customer_accounts_by_institution(customer_id, institution_id, opts = {})
      data, _status_code, _headers = get_customer_accounts_by_institution_with_http_info(customer_id, institution_id, opts)
      data
    end

    # Get Customer Accounts by Institution ID
    # Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_id [Integer] The institution ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def get_customer_accounts_by_institution_with_http_info(customer_id, institution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_customer_accounts_by_institution ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_customer_accounts_by_institution"
      end
      # verify the required parameter 'institution_id' is set
      if @api_client.config.client_side_validation && institution_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_id' when calling AccountsApi.get_customer_accounts_by_institution"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionId' + '}', CGI.escape(institution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_customer_accounts_by_institution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_customer_accounts_by_institution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Accounts by Institution Login ID
    # Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccounts]
    def get_customer_accounts_by_institution_login(customer_id, institution_login_id, opts = {})
      data, _status_code, _headers = get_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts)
      data
    end

    # Get Customer Accounts by Institution Login ID
    # Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def get_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_customer_accounts_by_institution_login ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.get_customer_accounts_by_institution_login"
      end
      # verify the required parameter 'institution_login_id' is set
      if @api_client.config.client_side_validation && institution_login_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_login_id' when calling AccountsApi.get_customer_accounts_by_institution_login"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionLoginId' + '}', CGI.escape(institution_login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_customer_accounts_by_institution_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_customer_accounts_by_institution_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Customer Accounts
    # Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccounts]
    def refresh_customer_accounts(customer_id, opts = {})
      data, _status_code, _headers = refresh_customer_accounts_with_http_info(customer_id, opts)
      data
    end

    # Refresh Customer Accounts
    # Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def refresh_customer_accounts_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.refresh_customer_accounts ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.refresh_customer_accounts"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.refresh_customer_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#refresh_customer_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Customer Accounts by Institution Login ID
    # Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccounts]
    def refresh_customer_accounts_by_institution_login(customer_id, institution_login_id, opts = {})
      data, _status_code, _headers = refresh_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts)
      data
    end

    # Refresh Customer Accounts by Institution Login ID
    # Refresh account and transaction data for all accounts associated with a given &#x60;institutionLoginId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def refresh_customer_accounts_by_institution_login_with_http_info(customer_id, institution_login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.refresh_customer_accounts_by_institution_login ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.refresh_customer_accounts_by_institution_login"
      end
      # verify the required parameter 'institution_login_id' is set
      if @api_client.config.client_side_validation && institution_login_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_login_id' when calling AccountsApi.refresh_customer_accounts_by_institution_login"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionLoginId' + '}', CGI.escape(institution_login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.refresh_customer_accounts_by_institution_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#refresh_customer_accounts_by_institution_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Customer Account by Institution Login ID for Data Access Tiers
    # Refresh account and transaction data for all accounts associated with a given 'institutionLoginId` with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_customer_accounts_by_institution_login_v2(customer_id, institution_login_id, opts = {})
      refresh_customer_accounts_by_institution_login_v2_with_http_info(customer_id, institution_login_id, opts)
      nil
    end

    # Refresh Customer Account by Institution Login ID for Data Access Tiers
    # Refresh account and transaction data for all accounts associated with a given &#39;institutionLoginId&#x60; with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_customer_accounts_by_institution_login_v2_with_http_info(customer_id, institution_login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.refresh_customer_accounts_by_institution_login_v2 ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.refresh_customer_accounts_by_institution_login_v2"
      end
      # verify the required parameter 'institution_login_id' is set
      if @api_client.config.client_side_validation && institution_login_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_login_id' when calling AccountsApi.refresh_customer_accounts_by_institution_login_v2"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionLoginId' + '}', CGI.escape(institution_login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.refresh_customer_accounts_by_institution_login_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#refresh_customer_accounts_by_institution_login_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh Customer Accounts for Data Access Tiers
    # Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_customer_accounts_v2(customer_id, opts = {})
      refresh_customer_accounts_v2_with_http_info(customer_id, opts)
      nil
    end

    # Refresh Customer Accounts for Data Access Tiers
    # Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_customer_accounts_v2_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.refresh_customer_accounts_v2 ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AccountsApi.refresh_customer_accounts_v2"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/{customerId}/accounts'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AccountsApi.refresh_customer_accounts_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#refresh_customer_accounts_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
