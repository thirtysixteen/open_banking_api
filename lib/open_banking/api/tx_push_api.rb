=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class TxPushApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create TxPush Test Transaction
    # Inject a transaction into the transaction list for a testing account. This allows an app to trigger TxPush notifications for the account in order to test the app's TxPush Listener service. This causes the platform to send one transaction event and one account event (showing that the account balance has changed). This service is only supported for testing accounts.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param test_tx_push_transaction [TestTxPushTransaction] 
    # @param [Hash] opts the optional parameters
    # @return [CreatedTestTxPushTransaction]
    def create_tx_push_test_transaction(customer_id, account_id, test_tx_push_transaction, opts = {})
      data, _status_code, _headers = create_tx_push_test_transaction_with_http_info(customer_id, account_id, test_tx_push_transaction, opts)
      data
    end

    # Create TxPush Test Transaction
    # Inject a transaction into the transaction list for a testing account. This allows an app to trigger TxPush notifications for the account in order to test the app&#39;s TxPush Listener service. This causes the platform to send one transaction event and one account event (showing that the account balance has changed). This service is only supported for testing accounts.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param test_tx_push_transaction [TestTxPushTransaction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatedTestTxPushTransaction, Integer, Hash)>] CreatedTestTxPushTransaction data, response status code and response headers
    def create_tx_push_test_transaction_with_http_info(customer_id, account_id, test_tx_push_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TxPushApi.create_tx_push_test_transaction ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling TxPushApi.create_tx_push_test_transaction"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TxPushApi.create_tx_push_test_transaction"
      end
      # verify the required parameter 'test_tx_push_transaction' is set
      if @api_client.config.client_side_validation && test_tx_push_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'test_tx_push_transaction' when calling TxPushApi.create_tx_push_test_transaction"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts/{accountId}/transactions'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(test_tx_push_transaction)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatedTestTxPushTransaction'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"TxPushApi.create_tx_push_test_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TxPushApi#create_tx_push_test_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete TxPush Subscription
    # Delete a specific subscription to TxPush notifications for the given account. This could be individual deleting the account or transactions events. No more events will be sent for that specific subscription.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param subscription_id [Integer] The subscription ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_tx_push_subscription(customer_id, subscription_id, opts = {})
      delete_tx_push_subscription_with_http_info(customer_id, subscription_id, opts)
      nil
    end

    # Delete TxPush Subscription
    # Delete a specific subscription to TxPush notifications for the given account. This could be individual deleting the account or transactions events. No more events will be sent for that specific subscription.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param subscription_id [Integer] The subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_tx_push_subscription_with_http_info(customer_id, subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TxPushApi.delete_tx_push_subscription ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling TxPushApi.delete_tx_push_subscription"
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling TxPushApi.delete_tx_push_subscription"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/subscriptions/{subscriptionId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"TxPushApi.delete_tx_push_subscription",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TxPushApi#delete_tx_push_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable TxPush Notifications
    # Delete all TxPush subscriptions with their notifications for the given account. No more notifications will be sent for account or transaction events.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_tx_push_notifications(customer_id, account_id, opts = {})
      disable_tx_push_notifications_with_http_info(customer_id, account_id, opts)
      nil
    end

    # Disable TxPush Notifications
    # Delete all TxPush subscriptions with their notifications for the given account. No more notifications will be sent for account or transaction events.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_tx_push_notifications_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TxPushApi.disable_tx_push_notifications ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling TxPushApi.disable_tx_push_notifications"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TxPushApi.disable_tx_push_notifications"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"TxPushApi.disable_tx_push_notifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TxPushApi#disable_tx_push_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe to TxPush Notifications
    # Register a client app's TxPush Listener to receive TxPush notifications related to the given account.  Each call to this service will return two records, one with class account and one with class transaction. Account events are sent when values change in the account's fields (such as `balance` or `interestRate`). Transaction events are sent whenever a new transaction is posted for the account. For institutions that do not provide TxPush services, notifications are sent as soon as Finicity finds a new transaction or new account data through regular aggregation processes.  The listener's URL must be secure (HTTPS) for any real-world account. In addition, the client's TxPush Listener will need to be verified. HTTP and HTTPS connections are only allowed on the standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param tx_push_subscription_parameters [TxPushSubscriptionParameters] 
    # @param [Hash] opts the optional parameters
    # @return [TxPushSubscriptions]
    def subscribe_to_tx_push_notifications(customer_id, account_id, tx_push_subscription_parameters, opts = {})
      data, _status_code, _headers = subscribe_to_tx_push_notifications_with_http_info(customer_id, account_id, tx_push_subscription_parameters, opts)
      data
    end

    # Subscribe to TxPush Notifications
    # Register a client app&#39;s TxPush Listener to receive TxPush notifications related to the given account.  Each call to this service will return two records, one with class account and one with class transaction. Account events are sent when values change in the account&#39;s fields (such as &#x60;balance&#x60; or &#x60;interestRate&#x60;). Transaction events are sent whenever a new transaction is posted for the account. For institutions that do not provide TxPush services, notifications are sent as soon as Finicity finds a new transaction or new account data through regular aggregation processes.  The listener&#39;s URL must be secure (HTTPS) for any real-world account. In addition, the client&#39;s TxPush Listener will need to be verified. HTTP and HTTPS connections are only allowed on the standard ports 80 (HTTP) and 443 (HTTPS). The use of other ports will result with the call failing.  For additional details on this process, see [TxPush Listener Service](https://developer.mastercard.com/open-banking-us/documentation/products/manage/tx-push/#setting-up-the-txpush-listener-service).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param tx_push_subscription_parameters [TxPushSubscriptionParameters] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TxPushSubscriptions, Integer, Hash)>] TxPushSubscriptions data, response status code and response headers
    def subscribe_to_tx_push_notifications_with_http_info(customer_id, account_id, tx_push_subscription_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TxPushApi.subscribe_to_tx_push_notifications ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling TxPushApi.subscribe_to_tx_push_notifications"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling TxPushApi.subscribe_to_tx_push_notifications"
      end
      # verify the required parameter 'tx_push_subscription_parameters' is set
      if @api_client.config.client_side_validation && tx_push_subscription_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'tx_push_subscription_parameters' when calling TxPushApi.subscribe_to_tx_push_notifications"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts/{accountId}/txpush'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tx_push_subscription_parameters)

      # return_type
      return_type = opts[:debug_return_type] || 'TxPushSubscriptions'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"TxPushApi.subscribe_to_tx_push_notifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TxPushApi#subscribe_to_tx_push_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
