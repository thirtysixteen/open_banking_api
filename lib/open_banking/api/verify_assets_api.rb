=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class VerifyAssetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Prequalification (CRA) Report
    # Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param prequalification_report_constraints [PrequalificationReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [PrequalificationReportAck]
    def generate_prequalification_cra_report(customer_id, prequalification_report_constraints, opts = {})
      data, _status_code, _headers = generate_prequalification_cra_report_with_http_info(customer_id, prequalification_report_constraints, opts)
      data
    end

    # Generate Prequalification (CRA) Report
    # Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param prequalification_report_constraints [PrequalificationReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(PrequalificationReportAck, Integer, Hash)>] PrequalificationReportAck data, response status code and response headers
    def generate_prequalification_cra_report_with_http_info(customer_id, prequalification_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyAssetsApi.generate_prequalification_cra_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling VerifyAssetsApi.generate_prequalification_cra_report"
      end
      # verify the required parameter 'prequalification_report_constraints' is set
      if @api_client.config.client_side_validation && prequalification_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'prequalification_report_constraints' when calling VerifyAssetsApi.generate_prequalification_cra_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/preQualVoa'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prequalification_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'PrequalificationReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"VerifyAssetsApi.generate_prequalification_cra_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyAssetsApi#generate_prequalification_cra_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Prequalification (Non-CRA) Report
    # Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param prequalification_report_constraints [PrequalificationReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [PrequalificationReportAck]
    def generate_prequalification_non_cra_report(customer_id, prequalification_report_constraints, opts = {})
      data, _status_code, _headers = generate_prequalification_non_cra_report_with_http_info(customer_id, prequalification_report_constraints, opts)
      data
    end

    # Generate Prequalification (Non-CRA) Report
    # Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param prequalification_report_constraints [PrequalificationReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(PrequalificationReportAck, Integer, Hash)>] PrequalificationReportAck data, response status code and response headers
    def generate_prequalification_non_cra_report_with_http_info(customer_id, prequalification_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyAssetsApi.generate_prequalification_non_cra_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling VerifyAssetsApi.generate_prequalification_non_cra_report"
      end
      # verify the required parameter 'prequalification_report_constraints' is set
      if @api_client.config.client_side_validation && prequalification_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'prequalification_report_constraints' when calling VerifyAssetsApi.generate_prequalification_non_cra_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/assetSummary'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prequalification_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'PrequalificationReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"VerifyAssetsApi.generate_prequalification_non_cra_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyAssetsApi#generate_prequalification_non_cra_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate VOA Report
    # Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param voa_report_constraints [VOAReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [VOAReportAck]
    def generate_voa_report(customer_id, voa_report_constraints, opts = {})
      data, _status_code, _headers = generate_voa_report_with_http_info(customer_id, voa_report_constraints, opts)
      data
    end

    # Generate VOA Report
    # Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param voa_report_constraints [VOAReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(VOAReportAck, Integer, Hash)>] VOAReportAck data, response status code and response headers
    def generate_voa_report_with_http_info(customer_id, voa_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyAssetsApi.generate_voa_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling VerifyAssetsApi.generate_voa_report"
      end
      # verify the required parameter 'voa_report_constraints' is set
      if @api_client.config.client_side_validation && voa_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'voa_report_constraints' when calling VerifyAssetsApi.generate_voa_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/voa'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(voa_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'VOAReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"VerifyAssetsApi.generate_voa_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyAssetsApi#generate_voa_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate VOA With Income Report
    # Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param voa_with_income_report_constraints [VOAWithIncomeReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [VOAWithIncomeReportAck]
    def generate_voa_with_income_report(customer_id, voa_with_income_report_constraints, opts = {})
      data, _status_code, _headers = generate_voa_with_income_report_with_http_info(customer_id, voa_with_income_report_constraints, opts)
      data
    end

    # Generate VOA With Income Report
    # Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the &#x60;fromDate&#x60; parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of &#x60;fromDate&#x60; for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param voa_with_income_report_constraints [VOAWithIncomeReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(VOAWithIncomeReportAck, Integer, Hash)>] VOAWithIncomeReportAck data, response status code and response headers
    def generate_voa_with_income_report_with_http_info(customer_id, voa_with_income_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyAssetsApi.generate_voa_with_income_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling VerifyAssetsApi.generate_voa_with_income_report"
      end
      # verify the required parameter 'voa_with_income_report_constraints' is set
      if @api_client.config.client_side_validation && voa_with_income_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'voa_with_income_report_constraints' when calling VerifyAssetsApi.generate_voa_with_income_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/voaHistory'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(voa_with_income_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'VOAWithIncomeReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"VerifyAssetsApi.generate_voa_with_income_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyAssetsApi#generate_voa_with_income_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
