=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class BankStatementsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Statement Report
    # Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param statement_report_constraints [StatementReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [StatementReportAck]
    def generate_statement_report(customer_id, statement_report_constraints, opts = {})
      data, _status_code, _headers = generate_statement_report_with_http_info(customer_id, statement_report_constraints, opts)
      data
    end

    # Generate Statement Report
    # Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param statement_report_constraints [StatementReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(StatementReportAck, Integer, Hash)>] StatementReportAck data, response status code and response headers
    def generate_statement_report_with_http_info(customer_id, statement_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankStatementsApi.generate_statement_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankStatementsApi.generate_statement_report"
      end
      # verify the required parameter 'statement_report_constraints' is set
      if @api_client.config.client_side_validation && statement_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'statement_report_constraints' when calling BankStatementsApi.generate_statement_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/statement'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(statement_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'StatementReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BankStatementsApi.generate_statement_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankStatementsApi#generate_statement_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Account Multiple Statements
    # This endpoint retrieves account statements for a given customer. The maximum number of statements that can be returned is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :index Request statements with comma-separated indexes between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return the sixth most recent statement. (default to '1')
    # @return [CustomerAccountMultipleStatements]
    def get_customer_account_multiple_statement(customer_id, account_id, opts = {})
      data, _status_code, _headers = get_customer_account_multiple_statement_with_http_info(customer_id, account_id, opts)
      data
    end

    # Get Customer Account Multiple Statements
    # This endpoint retrieves account statements for a given customer. The maximum number of statements that can be returned is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :index Request statements with comma-separated indexes between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return the sixth most recent statement. (default to '1')
    # @return [Array<(CustomerAccountMultipleStatements, Integer, Hash)>] CustomerAccountMultipleStatements data, response status code and response headers
    def get_customer_account_multiple_statement_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankStatementsApi.get_customer_account_multiple_statement ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankStatementsApi.get_customer_account_multiple_statement"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BankStatementsApi.get_customer_account_multiple_statement"
      end
      # resource path
      local_var_path = '/aggregation/v3/customers/{customerId}/accounts/{accountId}/statement'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = opts[:'index'] if !opts[:'index'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccountMultipleStatements'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BankStatementsApi.get_customer_account_multiple_statement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankStatementsApi#get_customer_account_multiple_statement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer Account Statement
    # Retrieve the customer's bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :index Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement. (default to 1)
    # @option opts [String] :type The type of statement to retrieve
    # @return [File]
    def get_customer_account_statement(customer_id, account_id, opts = {})
      data, _status_code, _headers = get_customer_account_statement_with_http_info(customer_id, account_id, opts)
      data
    end

    # Get Customer Account Statement
    # Retrieve the customer&#39;s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param account_id [String] The account ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :index Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement. (default to 1)
    # @option opts [String] :type The type of statement to retrieve
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_customer_account_statement_with_http_info(customer_id, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankStatementsApi.get_customer_account_statement ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BankStatementsApi.get_customer_account_statement"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BankStatementsApi.get_customer_account_statement"
      end
      if @api_client.config.client_side_validation && !opts[:'index'].nil? && opts[:'index'] > 24
        fail ArgumentError, 'invalid value for "opts[:"index"]" when calling BankStatementsApi.get_customer_account_statement, must be smaller than or equal to 24.'
      end

      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'index'] = opts[:'index'] if !opts[:'index'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BankStatementsApi.get_customer_account_statement",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankStatementsApi#get_customer_account_statement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
