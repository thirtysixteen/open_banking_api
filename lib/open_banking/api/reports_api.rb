=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class ReportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Report by Consumer and ID
    # Get a report that has been generated by a previous call to one of the Generate Report services.  The report's `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param report_id [String] ID of the report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @option opts [String] :on_behalf_of The name of the entity you are retrieving the report on behalf of
    # @return [Report]
    def get_report_by_consumer(consumer_id, report_id, opts = {})
      data, _status_code, _headers = get_report_by_consumer_with_http_info(consumer_id, report_id, opts)
      data
    end

    # Get Report by Consumer and ID
    # Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param report_id [String] ID of the report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @option opts [String] :on_behalf_of The name of the entity you are retrieving the report on behalf of
    # @return [Array<(Report, Integer, Hash)>] Report data, response status code and response headers
    def get_report_by_consumer_with_http_info(consumer_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_report_by_consumer ...'
      end
      # verify the required parameter 'consumer_id' is set
      if @api_client.config.client_side_validation && consumer_id.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_id' when calling ReportsApi.get_report_by_consumer"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportsApi.get_report_by_consumer"
      end
      # resource path
      local_var_path = '/decisioning/v3/consumers/{consumerId}/reports/{reportId}'.sub('{' + 'consumerId' + '}', CGI.escape(consumer_id.to_s)).sub('{' + 'reportId' + '}', CGI.escape(report_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'purpose'] = opts[:'purpose'] if !opts[:'purpose'].nil?
      query_params[:'onBehalfOf'] = opts[:'on_behalf_of'] if !opts[:'on_behalf_of'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Report'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_report_by_consumer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_report_by_consumer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Report by Customer and ID
    # Get a report that has been generated by a previous call to one of the Generate Report services.  The report's `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param report_id [String] ID of the report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_behalf_of The name of the entity you are retrieving the report on behalf of
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [Report]
    def get_report_by_customer(customer_id, report_id, opts = {})
      data, _status_code, _headers = get_report_by_customer_with_http_info(customer_id, report_id, opts)
      data
    end

    # Get Report by Customer and ID
    # Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param report_id [String] ID of the report
    # @param [Hash] opts the optional parameters
    # @option opts [String] :on_behalf_of The name of the entity you are retrieving the report on behalf of
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [Array<(Report, Integer, Hash)>] Report data, response status code and response headers
    def get_report_by_customer_with_http_info(customer_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_report_by_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ReportsApi.get_report_by_customer"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportsApi.get_report_by_customer"
      end
      # resource path
      local_var_path = '/decisioning/v3/customers/{customerId}/reports/{reportId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'reportId' + '}', CGI.escape(report_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onBehalfOf'] = opts[:'on_behalf_of'] if !opts[:'on_behalf_of'].nil?
      query_params[:'purpose'] = opts[:'purpose'] if !opts[:'purpose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Report'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_report_by_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_report_by_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reports by Consumer ID
    # Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [ReportSummaries]
    def get_reports_by_consumer_id(consumer_id, opts = {})
      data, _status_code, _headers = get_reports_by_consumer_id_with_http_info(consumer_id, opts)
      data
    end

    # Get Reports by Consumer ID
    # Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [Array<(ReportSummaries, Integer, Hash)>] ReportSummaries data, response status code and response headers
    def get_reports_by_consumer_id_with_http_info(consumer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_reports_by_consumer_id ...'
      end
      # verify the required parameter 'consumer_id' is set
      if @api_client.config.client_side_validation && consumer_id.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_id' when calling ReportsApi.get_reports_by_consumer_id"
      end
      # resource path
      local_var_path = '/decisioning/v1/consumers/{consumerId}/reports'.sub('{' + 'consumerId' + '}', CGI.escape(consumer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'purpose'] = opts[:'purpose'] if !opts[:'purpose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportSummaries'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_reports_by_consumer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_reports_by_consumer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reports by Customer ID
    # Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [ReportSummaries]
    def get_reports_by_customer_id(customer_id, opts = {})
      data, _status_code, _headers = get_reports_by_customer_id_with_http_info(customer_id, opts)
      data
    end

    # Get Reports by Customer ID
    # Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    # @return [Array<(ReportSummaries, Integer, Hash)>] ReportSummaries data, response status code and response headers
    def get_reports_by_customer_id_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsApi.get_reports_by_customer_id ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ReportsApi.get_reports_by_customer_id"
      end
      # resource path
      local_var_path = '/decisioning/v1/customers/{customerId}/reports'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'purpose'] = opts[:'purpose'] if !opts[:'purpose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportSummaries'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ReportsApi.get_reports_by_customer_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsApi#get_reports_by_customer_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
