=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class CustomersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Customer
    # Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \"FinBank Billable\" profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param new_customer [NewCustomer] 
    # @param [Hash] opts the optional parameters
    # @return [CreatedCustomer]
    def add_customer(new_customer, opts = {})
      data, _status_code, _headers = add_customer_with_http_info(new_customer, opts)
      data
    end

    # Add Customer
    # Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \&quot;FinBank Billable\&quot; profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param new_customer [NewCustomer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatedCustomer, Integer, Hash)>] CreatedCustomer data, response status code and response headers
    def add_customer_with_http_info(new_customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.add_customer ...'
      end
      # verify the required parameter 'new_customer' is set
      if @api_client.config.client_side_validation && new_customer.nil?
        fail ArgumentError, "Missing the required parameter 'new_customer' when calling CustomersApi.add_customer"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/active'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_customer)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatedCustomer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.add_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#add_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Testing Customer
    # Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing `applicationId` when creating testing customers.  Testing Customers can access FinBank profiles (except \"FinBank Billable\" profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param new_customer [NewCustomer] 
    # @param [Hash] opts the optional parameters
    # @return [CreatedCustomer]
    def add_testing_customer(new_customer, opts = {})
      data, _status_code, _headers = add_testing_customer_with_http_info(new_customer, opts)
      data
    end

    # Add Testing Customer
    # Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing &#x60;applicationId&#x60; when creating testing customers.  Testing Customers can access FinBank profiles (except \&quot;FinBank Billable\&quot; profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param new_customer [NewCustomer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatedCustomer, Integer, Hash)>] CreatedCustomer data, response status code and response headers
    def add_testing_customer_with_http_info(new_customer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.add_testing_customer ...'
      end
      # verify the required parameter 'new_customer' is set
      if @api_client.config.client_side_validation && new_customer.nil?
        fail ArgumentError, "Missing the required parameter 'new_customer' when calling CustomersApi.add_testing_customer"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/testing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_customer)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatedCustomer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.add_testing_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#add_testing_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Access to Customer by ID
    # Delete access to a customer and all associated accounts. This will delete access to the customer and all their linked accounts. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise data retention policy consistent with legal and business purposes.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation! _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customer(customer_id, opts = {})
      delete_customer_with_http_info(customer_id, opts)
      nil
    end

    # Delete Access to Customer by ID
    # Delete access to a customer and all associated accounts. This will delete access to the customer and all their linked accounts. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise data retention policy consistent with legal and business purposes.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation! _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.delete_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.delete_customer"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.delete_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#delete_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer by ID
    # Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [GetCustomer200Response]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # Get Customer by ID
    # Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCustomer200Response, Integer, Hash)>] GetCustomer200Response data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_customer"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCustomer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer With App Data by ID
    # Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerWithAppData]
    def get_customer_with_app_data(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_app_data_with_http_info(customer_id, opts)
      data
    end

    # Get Customer With App Data by ID
    # Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerWithAppData, Integer, Hash)>] CustomerWithAppData data, response status code and response headers
    def get_customer_with_app_data_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customer_with_app_data ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.get_customer_with_app_data"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/application'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerWithAppData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_customer_with_app_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customer_with_app_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customers
    # Find all customers enrolled by the current partner, where the search text is found in the customer's username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username for exact match (will return 0 or 1 record)
    # @option opts [String] :type \&quot;testing\&quot; or \&quot;active\&quot; to return only customers of that type, or leave empty to return all customers
    # @option opts [String] :search The text you wish to match. Leave this empty if you wish to return all customers. Must be URL-encoded (see: [Handling Spaces in Queries](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/)).
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @return [Customers]
    def get_customers(opts = {})
      data, _status_code, _headers = get_customers_with_http_info(opts)
      data
    end

    # Get Customers
    # Find all customers enrolled by the current partner, where the search text is found in the customer&#39;s username or any combination of &#x60;firstName&#x60; and &#x60;lastName&#x60; fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username for exact match (will return 0 or 1 record)
    # @option opts [String] :type \&quot;testing\&quot; or \&quot;active\&quot; to return only customers of that type, or leave empty to return all customers
    # @option opts [String] :search The text you wish to match. Leave this empty if you wish to return all customers. Must be URL-encoded (see: [Handling Spaces in Queries](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/)).
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @return [Array<(Customers, Integer, Hash)>] Customers data, response status code and response headers
    def get_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.get_customers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CustomersApi.get_customers, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/aggregation/v1/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Customers'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.get_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify Customer by ID
    # Modify an enrolled customer by ID.  You must specify either `firstName`, `lastName`, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param customer_update [CustomerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_customer(customer_id, customer_update, opts = {})
      modify_customer_with_http_info(customer_id, customer_update, opts)
      nil
    end

    # Modify Customer by ID
    # Modify an enrolled customer by ID.  You must specify either &#x60;firstName&#x60;, &#x60;lastName&#x60;, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param customer_update [CustomerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_customer_with_http_info(customer_id, customer_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomersApi.modify_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomersApi.modify_customer"
      end
      # verify the required parameter 'customer_update' is set
      if @api_client.config.client_side_validation && customer_update.nil?
        fail ArgumentError, "Missing the required parameter 'customer_update' when calling CustomersApi.modify_customer"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CustomersApi.modify_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomersApi#modify_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
