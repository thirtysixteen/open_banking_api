=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class CashFlowApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Cash Flow Report - Business
    # Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param cash_flow_report_constraints [CashFlowReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [CashFlowReportAck]
    def generate_cash_flow_business_report(customer_id, cash_flow_report_constraints, opts = {})
      data, _status_code, _headers = generate_cash_flow_business_report_with_http_info(customer_id, cash_flow_report_constraints, opts)
      data
    end

    # Generate Cash Flow Report - Business
    # Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param cash_flow_report_constraints [CashFlowReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(CashFlowReportAck, Integer, Hash)>] CashFlowReportAck data, response status code and response headers
    def generate_cash_flow_business_report_with_http_info(customer_id, cash_flow_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CashFlowApi.generate_cash_flow_business_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CashFlowApi.generate_cash_flow_business_report"
      end
      # verify the required parameter 'cash_flow_report_constraints' is set
      if @api_client.config.client_side_validation && cash_flow_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'cash_flow_report_constraints' when calling CashFlowApi.generate_cash_flow_business_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/cashFlowBusiness'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cash_flow_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'CashFlowReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CashFlowApi.generate_cash_flow_business_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CashFlowApi#generate_cash_flow_business_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Cash Flow Report - Personal
    # Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param cash_flow_report_constraints [CashFlowReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [CashFlowReportAck]
    def generate_cash_flow_personal_report(customer_id, cash_flow_report_constraints, opts = {})
      data, _status_code, _headers = generate_cash_flow_personal_report_with_http_info(customer_id, cash_flow_report_constraints, opts)
      data
    end

    # Generate Cash Flow Report - Personal
    # Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param cash_flow_report_constraints [CashFlowReportConstraints] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :callback_url A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    # @return [Array<(CashFlowReportAck, Integer, Hash)>] CashFlowReportAck data, response status code and response headers
    def generate_cash_flow_personal_report_with_http_info(customer_id, cash_flow_report_constraints, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CashFlowApi.generate_cash_flow_personal_report ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CashFlowApi.generate_cash_flow_personal_report"
      end
      # verify the required parameter 'cash_flow_report_constraints' is set
      if @api_client.config.client_side_validation && cash_flow_report_constraints.nil?
        fail ArgumentError, "Missing the required parameter 'cash_flow_report_constraints' when calling CashFlowApi.generate_cash_flow_personal_report"
      end
      # resource path
      local_var_path = '/decisioning/v2/customers/{customerId}/cashFlowPersonal'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'callbackUrl'] = opts[:'callback_url'] if !opts[:'callback_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cash_flow_report_constraints)

      # return_type
      return_type = opts[:debug_return_type] || 'CashFlowReportAck'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"CashFlowApi.generate_cash_flow_personal_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CashFlowApi#generate_cash_flow_personal_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
