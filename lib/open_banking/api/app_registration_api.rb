=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class AppRegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get App Registration Status
    # Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pre_app_id The application registration tracking ID
    # @option opts [String] :application_id The application ID
    # @option opts [String] :status Look up app registration requests by status
    # @option opts [String] :app_name Look up app registration requests by app name
    # @option opts [Integer] :submitted_date Look up app registration requests by the date they were submitted
    # @option opts [Integer] :modified_date Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \&quot;A\&quot; or \&quot;R\&quot;.
    # @option opts [Integer] :page Index of the page of results to return (default to 1)
    # @option opts [Integer] :page_size Maximum number of results per page (default to 1)
    # @return [AppStatuses]
    def get_app_registration_status(opts = {})
      data, _status_code, _headers = get_app_registration_status_with_http_info(opts)
      data
    end

    # Get App Registration Status
    # Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pre_app_id The application registration tracking ID
    # @option opts [String] :application_id The application ID
    # @option opts [String] :status Look up app registration requests by status
    # @option opts [String] :app_name Look up app registration requests by app name
    # @option opts [Integer] :submitted_date Look up app registration requests by the date they were submitted
    # @option opts [Integer] :modified_date Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \&quot;A\&quot; or \&quot;R\&quot;.
    # @option opts [Integer] :page Index of the page of results to return (default to 1)
    # @option opts [Integer] :page_size Maximum number of results per page (default to 1)
    # @return [Array<(AppStatuses, Integer, Hash)>] AppStatuses data, response status code and response headers
    def get_app_registration_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.get_app_registration_status ...'
      end
      # resource path
      local_var_path = '/aggregation/v2/partners/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'preAppId'] = opts[:'pre_app_id'] if !opts[:'pre_app_id'].nil?
      query_params[:'applicationId'] = opts[:'application_id'] if !opts[:'application_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'appName'] = opts[:'app_name'] if !opts[:'app_name'].nil?
      query_params[:'submittedDate'] = opts[:'submitted_date'] if !opts[:'submitted_date'].nil?
      query_params[:'modifiedDate'] = opts[:'modified_date'] if !opts[:'modified_date'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppStatuses'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.get_app_registration_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#get_app_registration_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get applications details.
    # This endpoint returns the status of the submitted application and provides additional details.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 50)
    # @option opts [Integer] :pre_app_id The identifier is provided by Mastercard at the first stage of application registration.
    # @option opts [String] :application_id The identifier is generated after the pre-app is approved. Pre-app is the first stage of application registration. Partner first submits an application registration request, then a Pre-app Id is generated for it, and if all the details are correct, the sales team will approve it, and then an application will be registered with the Application Id and associated with the Pre-app. This Application Id is utilized throughout the lifespan of an application.
    # @option opts [String] :name The application name provided by the partner.
    # @option opts [String] :status The application registration status with Mastercard. &#39;A&#39;&#x3D;Active , &#39;P&#39;&#x3D;Pending , &#39;D&#39;&#x3D;Deleted , &#39;R&#39;&#x3D;Rejected.
    # @return [ApplicationResponse]
    def get_applications(opts = {})
      data, _status_code, _headers = get_applications_with_http_info(opts)
      data
    end

    # Get applications details.
    # This endpoint returns the status of the submitted application and provides additional details.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 50)
    # @option opts [Integer] :pre_app_id The identifier is provided by Mastercard at the first stage of application registration.
    # @option opts [String] :application_id The identifier is generated after the pre-app is approved. Pre-app is the first stage of application registration. Partner first submits an application registration request, then a Pre-app Id is generated for it, and if all the details are correct, the sales team will approve it, and then an application will be registered with the Application Id and associated with the Pre-app. This Application Id is utilized throughout the lifespan of an application.
    # @option opts [String] :name The application name provided by the partner.
    # @option opts [String] :status The application registration status with Mastercard. &#39;A&#39;&#x3D;Active , &#39;P&#39;&#x3D;Pending , &#39;D&#39;&#x3D;Deleted , &#39;R&#39;&#x3D;Rejected.
    # @return [Array<(ApplicationResponse, Integer, Hash)>] ApplicationResponse data, response status code and response headers
    def get_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.get_applications ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AppRegistrationApi.get_applications, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AppRegistrationApi.get_applications, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'pre_app_id'] = opts[:'pre_app_id'] if !opts[:'pre_app_id'].nil?
      query_params[:'application_id'] = opts[:'application_id'] if !opts[:'application_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.get_applications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#get_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the application registration status with the financial institutions.
    # The registration status of the approved application against the financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param application_id [String] The identifier is generated after the pre-app is approved. Pre-app is the first stage of application registration. Partner first submits an application registration request, then a Pre-app Id is generated for it, and if all the details are correct, the sales team will approve it, and then an application will be registered with the Application Id and associated with the Pre-app. This Application Id is utilized throughout the lifespan of an application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [Integer] :institution_id The financial institution id at Mastercard.
    # @return [InstitutionResponse]
    def get_registered_institutions(application_id, opts = {})
      data, _status_code, _headers = get_registered_institutions_with_http_info(application_id, opts)
      data
    end

    # Get the application registration status with the financial institutions.
    # The registration status of the approved application against the financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param application_id [String] The identifier is generated after the pre-app is approved. Pre-app is the first stage of application registration. Partner first submits an application registration request, then a Pre-app Id is generated for it, and if all the details are correct, the sales team will approve it, and then an application will be registered with the Application Id and associated with the Pre-app. This Application Id is utilized throughout the lifespan of an application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start Index of the page of results to return (default to 1)
    # @option opts [Integer] :limit Maximum number of results per page (default to 25)
    # @option opts [Integer] :institution_id The financial institution id at Mastercard.
    # @return [Array<(InstitutionResponse, Integer, Hash)>] InstitutionResponse data, response status code and response headers
    def get_registered_institutions_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.get_registered_institutions ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling AppRegistrationApi.get_registered_institutions"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AppRegistrationApi.get_registered_institutions, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AppRegistrationApi.get_registered_institutions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/applications/{application_id}/institutions'.sub('{' + 'application_id' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'institution_id'] = opts[:'institution_id'] if !opts[:'institution_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InstitutionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.get_registered_institutions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#get_registered_institutions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate Institution Login Accounts
    # The `institutionLoginId` parameter uses Finicity's internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [CustomerAccounts]
    def migrate_institution_login_accounts(customer_id, institution_login_id, opts = {})
      data, _status_code, _headers = migrate_institution_login_accounts_with_http_info(customer_id, institution_login_id, opts)
      data
    end

    # Migrate Institution Login Accounts
    # The &#x60;institutionLoginId&#x60; parameter uses Finicity&#39;s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param institution_login_id [String] The institution login ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAccounts, Integer, Hash)>] CustomerAccounts data, response status code and response headers
    def migrate_institution_login_accounts_with_http_info(customer_id, institution_login_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.migrate_institution_login_accounts ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AppRegistrationApi.migrate_institution_login_accounts"
      end
      # verify the required parameter 'institution_login_id' is set
      if @api_client.config.client_side_validation && institution_login_id.nil?
        fail ArgumentError, "Missing the required parameter 'institution_login_id' when calling AppRegistrationApi.migrate_institution_login_accounts"
      end
      # resource path
      local_var_path = '/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'institutionLoginId' + '}', CGI.escape(institution_login_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.migrate_institution_login_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#migrate_institution_login_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify App Registration
    # Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param pre_app_id [String] The application registration tracking ID
    # @param application [Application] 
    # @param [Hash] opts the optional parameters
    # @return [RegisteredApplication]
    def modify_app_registration(pre_app_id, application, opts = {})
      data, _status_code, _headers = modify_app_registration_with_http_info(pre_app_id, application, opts)
      data
    end

    # Modify App Registration
    # Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param pre_app_id [String] The application registration tracking ID
    # @param application [Application] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegisteredApplication, Integer, Hash)>] RegisteredApplication data, response status code and response headers
    def modify_app_registration_with_http_info(pre_app_id, application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.modify_app_registration ...'
      end
      # verify the required parameter 'pre_app_id' is set
      if @api_client.config.client_side_validation && pre_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'pre_app_id' when calling AppRegistrationApi.modify_app_registration"
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling AppRegistrationApi.modify_app_registration"
      end
      # resource path
      local_var_path = '/aggregation/v1/partners/applications/{preAppId}'.sub('{' + 'preAppId' + '}', CGI.escape(pre_app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(application)

      # return_type
      return_type = opts[:debug_return_type] || 'RegisteredApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.modify_app_registration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#modify_app_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register App
    # Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param application [Application] 
    # @param [Hash] opts the optional parameters
    # @return [RegisteredApplication]
    def register_app(application, opts = {})
      data, _status_code, _headers = register_app_with_http_info(application, opts)
      data
    end

    # Register App
    # Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param application [Application] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RegisteredApplication, Integer, Hash)>] RegisteredApplication data, response status code and response headers
    def register_app_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.register_app ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling AppRegistrationApi.register_app"
      end
      # resource path
      local_var_path = '/aggregation/v1/partners/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(application)

      # return_type
      return_type = opts[:debug_return_type] || 'RegisteredApplication'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.register_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#register_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Customer App ID
    # If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param application_id [String] The application ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_customer_app_id(customer_id, application_id, opts = {})
      set_customer_app_id_with_http_info(customer_id, application_id, opts)
      nil
    end

    # Set Customer App ID
    # If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param application_id [String] The application ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_customer_app_id_with_http_info(customer_id, application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRegistrationApi.set_customer_app_id ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling AppRegistrationApi.set_customer_app_id"
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling AppRegistrationApi.set_customer_app_id"
      end
      # resource path
      local_var_path = '/aggregation/v1/customers/{customerId}/applications/{applicationId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s)).sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AppRegistrationApi.set_customer_app_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRegistrationApi#set_customer_app_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
