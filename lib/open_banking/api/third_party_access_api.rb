=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class ThirdPartyAccessApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Third Party Access Key
    # Generate access key for third party partners. A partner can provide access to third party partners with this access key.
    # @param third_party_access_key_data [ThirdPartyAccessKeyData] 
    # @param [Hash] opts the optional parameters
    # @return [ThirdPartyAccessKeyReceiptData]
    def generate_third_party_access_key(third_party_access_key_data, opts = {})
      data, _status_code, _headers = generate_third_party_access_key_with_http_info(third_party_access_key_data, opts)
      data
    end

    # Generate Third Party Access Key
    # Generate access key for third party partners. A partner can provide access to third party partners with this access key.
    # @param third_party_access_key_data [ThirdPartyAccessKeyData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThirdPartyAccessKeyReceiptData, Integer, Hash)>] ThirdPartyAccessKeyReceiptData data, response status code and response headers
    def generate_third_party_access_key_with_http_info(third_party_access_key_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ThirdPartyAccessApi.generate_third_party_access_key ...'
      end
      # verify the required parameter 'third_party_access_key_data' is set
      if @api_client.config.client_side_validation && third_party_access_key_data.nil?
        fail ArgumentError, "Missing the required parameter 'third_party_access_key_data' when calling ThirdPartyAccessApi.generate_third_party_access_key"
      end
      # resource path
      local_var_path = '/aggregation/v1/partners/accessKey'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(third_party_access_key_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ThirdPartyAccessKeyReceiptData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ThirdPartyAccessApi.generate_third_party_access_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThirdPartyAccessApi#generate_third_party_access_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke Third Party Access
    # Revoke access of third party partners
    # @param consent_receipt_id [String] Third party access key receipt ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def revoke_third_party_access_key(consent_receipt_id, opts = {})
      revoke_third_party_access_key_with_http_info(consent_receipt_id, opts)
      nil
    end

    # Revoke Third Party Access
    # Revoke access of third party partners
    # @param consent_receipt_id [String] Third party access key receipt ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def revoke_third_party_access_key_with_http_info(consent_receipt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ThirdPartyAccessApi.revoke_third_party_access_key ...'
      end
      # verify the required parameter 'consent_receipt_id' is set
      if @api_client.config.client_side_validation && consent_receipt_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_receipt_id' when calling ThirdPartyAccessApi.revoke_third_party_access_key"
      end
      # resource path
      local_var_path = '/aggregation/v1/partners/accessKey/{consentReceiptId}'.sub('{' + 'consentReceiptId' + '}', CGI.escape(consent_receipt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ThirdPartyAccessApi.revoke_third_party_access_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThirdPartyAccessApi#revoke_third_party_access_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Third Party Access
    # Update access for third party partners
    # @param consent_receipt_id [String] Third party access key receipt ID
    # @param third_party_access_key_data [ThirdPartyAccessKeyData] 
    # @param [Hash] opts the optional parameters
    # @return [ThirdPartyAccessKeyReceiptData]
    def update_third_party_access_key(consent_receipt_id, third_party_access_key_data, opts = {})
      data, _status_code, _headers = update_third_party_access_key_with_http_info(consent_receipt_id, third_party_access_key_data, opts)
      data
    end

    # Update Third Party Access
    # Update access for third party partners
    # @param consent_receipt_id [String] Third party access key receipt ID
    # @param third_party_access_key_data [ThirdPartyAccessKeyData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ThirdPartyAccessKeyReceiptData, Integer, Hash)>] ThirdPartyAccessKeyReceiptData data, response status code and response headers
    def update_third_party_access_key_with_http_info(consent_receipt_id, third_party_access_key_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ThirdPartyAccessApi.update_third_party_access_key ...'
      end
      # verify the required parameter 'consent_receipt_id' is set
      if @api_client.config.client_side_validation && consent_receipt_id.nil?
        fail ArgumentError, "Missing the required parameter 'consent_receipt_id' when calling ThirdPartyAccessApi.update_third_party_access_key"
      end
      # verify the required parameter 'third_party_access_key_data' is set
      if @api_client.config.client_side_validation && third_party_access_key_data.nil?
        fail ArgumentError, "Missing the required parameter 'third_party_access_key_data' when calling ThirdPartyAccessApi.update_third_party_access_key"
      end
      # resource path
      local_var_path = '/aggregation/v1/partners/accessKey/{consentReceiptId}'.sub('{' + 'consentReceiptId' + '}', CGI.escape(consent_receipt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(third_party_access_key_data)

      # return_type
      return_type = opts[:debug_return_type] || 'ThirdPartyAccessKeyReceiptData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ThirdPartyAccessApi.update_third_party_access_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThirdPartyAccessApi#update_third_party_access_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
