=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Access Token
    # Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ⚠️ After five failed attempts to authenticate, your account will be locked. To reset your account, you can report a support issue using the support.finicity.com portal. Alternatively, contact your Client Success Manager or your onboarding representative.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param partner_credentials [PartnerCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [AccessToken]
    def create_token(partner_credentials, opts = {})
      data, _status_code, _headers = create_token_with_http_info(partner_credentials, opts)
      data
    end

    # Create Access Token
    # Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ⚠️ After five failed attempts to authenticate, your account will be locked. To reset your account, you can report a support issue using the support.finicity.com portal. Alternatively, contact your Client Success Manager or your onboarding representative.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param partner_credentials [PartnerCredentials] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessToken, Integer, Hash)>] AccessToken data, response status code and response headers
    def create_token_with_http_info(partner_credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.create_token ...'
      end
      # verify the required parameter 'partner_credentials' is set
      if @api_client.config.client_side_validation && partner_credentials.nil?
        fail ArgumentError, "Missing the required parameter 'partner_credentials' when calling AuthenticationApi.create_token"
      end
      # resource path
      local_var_path = '/aggregation/v2/partners/authentication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(partner_credentials)

      # return_type
      return_type = opts[:debug_return_type] || 'AccessToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.create_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify Partner Secret
    # Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param partner_credentials_with_new_secret [PartnerCredentialsWithNewSecret] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_partner_secret(partner_credentials_with_new_secret, opts = {})
      modify_partner_secret_with_http_info(partner_credentials_with_new_secret, opts)
      nil
    end

    # Modify Partner Secret
    # Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &amp;, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
    # @param partner_credentials_with_new_secret [PartnerCredentialsWithNewSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_partner_secret_with_http_info(partner_credentials_with_new_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationApi.modify_partner_secret ...'
      end
      # verify the required parameter 'partner_credentials_with_new_secret' is set
      if @api_client.config.client_side_validation && partner_credentials_with_new_secret.nil?
        fail ArgumentError, "Missing the required parameter 'partner_credentials_with_new_secret' when calling AuthenticationApi.modify_partner_secret"
      end
      # resource path
      local_var_path = '/aggregation/v2/partners/authentication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(partner_credentials_with_new_secret)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppKey']

      new_options = opts.merge(
        :operation => :"AuthenticationApi.modify_partner_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#modify_partner_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
