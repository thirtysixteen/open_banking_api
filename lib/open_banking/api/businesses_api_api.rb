=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class BusinessesAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a New Business for a Customer
    # Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] Unique identifier of the customer
    # @param new_business [NewBusiness] 
    # @param [Hash] opts the optional parameters
    # @return [Business]
    def add_business_details(customer_id, new_business, opts = {})
      data, _status_code, _headers = add_business_details_with_http_info(customer_id, new_business, opts)
      data
    end

    # Create a New Business for a Customer
    # Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] Unique identifier of the customer
    # @param new_business [NewBusiness] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Business, Integer, Hash)>] Business data, response status code and response headers
    def add_business_details_with_http_info(customer_id, new_business, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessesAPIApi.add_business_details ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BusinessesAPIApi.add_business_details"
      end
      # verify the required parameter 'new_business' is set
      if @api_client.config.client_side_validation && new_business.nil?
        fail ArgumentError, "Missing the required parameter 'new_business' when calling BusinessesAPIApi.add_business_details"
      end
      # resource path
      local_var_path = '/business-services/customers/{customer_id}/businesses'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_business)

      # return_type
      return_type = opts[:debug_return_type] || 'Business'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BusinessesAPIApi.add_business_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessesAPIApi#add_business_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Business for Customer
    # Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] Unique identifier of the customer
    # @param [Hash] opts the optional parameters
    # @return [Array<Business>]
    def get_business_by_customer(customer_id, opts = {})
      data, _status_code, _headers = get_business_by_customer_with_http_info(customer_id, opts)
      data
    end

    # Get Business for Customer
    # Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] Unique identifier of the customer
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Business>, Integer, Hash)>] Array<Business> data, response status code and response headers
    def get_business_by_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessesAPIApi.get_business_by_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BusinessesAPIApi.get_business_by_customer"
      end
      # resource path
      local_var_path = '/business-services/customers/{customer_id}/businesses'.sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Business>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BusinessesAPIApi.get_business_by_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessesAPIApi#get_business_by_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Business by ID
    # Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
    # @param business_id [String] Unique identifier of the business
    # @param [Hash] opts the optional parameters
    # @return [Array<Business>]
    def get_business_by_id(business_id, opts = {})
      data, _status_code, _headers = get_business_by_id_with_http_info(business_id, opts)
      data
    end

    # Get Business by ID
    # Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
    # @param business_id [String] Unique identifier of the business
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Business>, Integer, Hash)>] Array<Business> data, response status code and response headers
    def get_business_by_id_with_http_info(business_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessesAPIApi.get_business_by_id ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling BusinessesAPIApi.get_business_by_id"
      end
      if @api_client.config.client_side_validation && business_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "business_id" when calling BusinessesAPIApi.get_business_by_id, the character length must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && business_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "business_id" when calling BusinessesAPIApi.get_business_by_id, the character length must be great than or equal to 1.'
      end

      # resource path
      local_var_path = '/business-services/businesses/{business_id}'.sub('{' + 'business_id' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Business>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BusinessesAPIApi.get_business_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessesAPIApi#get_business_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Business by ID
    # Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business's profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param business_id [String] Unique identifier of the business
    # @param new_business [NewBusiness] 
    # @param [Hash] opts the optional parameters
    # @return [Business]
    def update_business(business_id, new_business, opts = {})
      data, _status_code, _headers = update_business_with_http_info(business_id, new_business, opts)
      data
    end

    # Update Business by ID
    # Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business&#39;s profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param business_id [String] Unique identifier of the business
    # @param new_business [NewBusiness] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Business, Integer, Hash)>] Business data, response status code and response headers
    def update_business_with_http_info(business_id, new_business, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BusinessesAPIApi.update_business ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling BusinessesAPIApi.update_business"
      end
      if @api_client.config.client_side_validation && business_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "business_id" when calling BusinessesAPIApi.update_business, the character length must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && business_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "business_id" when calling BusinessesAPIApi.update_business, the character length must be great than or equal to 1.'
      end

      # verify the required parameter 'new_business' is set
      if @api_client.config.client_side_validation && new_business.nil?
        fail ArgumentError, "Missing the required parameter 'new_business' when calling BusinessesAPIApi.update_business"
      end
      # resource path
      local_var_path = '/business-services/businesses/{business_id}'.sub('{' + 'business_id' + '}', CGI.escape(business_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_business)

      # return_type
      return_type = opts[:debug_return_type] || 'Business'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"BusinessesAPIApi.update_business",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusinessesAPIApi#update_business\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
