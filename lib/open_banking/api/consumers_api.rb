=begin
#Open Banking

#OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.

The version of the OpenAPI document: 1.19.0
Contact: apisupport@mastercard.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0

=end

require 'cgi'

module OpenBanking
  class ConsumersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Consumer
    # Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param new_consumer [NewConsumer] 
    # @param [Hash] opts the optional parameters
    # @return [CreatedConsumer]
    def create_consumer(customer_id, new_consumer, opts = {})
      data, _status_code, _headers = create_consumer_with_http_info(customer_id, new_consumer, opts)
      data
    end

    # Create Consumer
    # Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param new_consumer [NewConsumer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatedConsumer, Integer, Hash)>] CreatedConsumer data, response status code and response headers
    def create_consumer_with_http_info(customer_id, new_consumer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumersApi.create_consumer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ConsumersApi.create_consumer"
      end
      # verify the required parameter 'new_consumer' is set
      if @api_client.config.client_side_validation && new_consumer.nil?
        fail ArgumentError, "Missing the required parameter 'new_consumer' when calling ConsumersApi.create_consumer"
      end
      # resource path
      local_var_path = '/decisioning/v1/customers/{customerId}/consumer'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_consumer)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatedConsumer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ConsumersApi.create_consumer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumersApi#create_consumer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Consumer by ID
    # Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param [Hash] opts the optional parameters
    # @return [Consumer]
    def get_consumer(consumer_id, opts = {})
      data, _status_code, _headers = get_consumer_with_http_info(consumer_id, opts)
      data
    end

    # Get Consumer by ID
    # Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Consumer, Integer, Hash)>] Consumer data, response status code and response headers
    def get_consumer_with_http_info(consumer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumersApi.get_consumer ...'
      end
      # verify the required parameter 'consumer_id' is set
      if @api_client.config.client_side_validation && consumer_id.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_id' when calling ConsumersApi.get_consumer"
      end
      # resource path
      local_var_path = '/decisioning/v1/consumers/{consumerId}'.sub('{' + 'consumerId' + '}', CGI.escape(consumer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Consumer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ConsumersApi.get_consumer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumersApi#get_consumer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Consumer For Customer
    # Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Consumer]
    def get_consumer_for_customer(customer_id, opts = {})
      data, _status_code, _headers = get_consumer_for_customer_with_http_info(customer_id, opts)
      data
    end

    # Get Consumer For Customer
    # Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param customer_id [String] A customer ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Consumer, Integer, Hash)>] Consumer data, response status code and response headers
    def get_consumer_for_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumersApi.get_consumer_for_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling ConsumersApi.get_consumer_for_customer"
      end
      # resource path
      local_var_path = '/decisioning/v1/customers/{customerId}/consumer'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Consumer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ConsumersApi.get_consumer_for_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumersApi#get_consumer_for_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify Consumer by ID
    # Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param consumer_update [ConsumerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def modify_consumer(consumer_id, consumer_update, opts = {})
      modify_consumer_with_http_info(consumer_id, consumer_update, opts)
      nil
    end

    # Modify Consumer by ID
    # Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
    # @param consumer_id [String] The consumer ID
    # @param consumer_update [ConsumerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def modify_consumer_with_http_info(consumer_id, consumer_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConsumersApi.modify_consumer ...'
      end
      # verify the required parameter 'consumer_id' is set
      if @api_client.config.client_side_validation && consumer_id.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_id' when calling ConsumersApi.modify_consumer"
      end
      # verify the required parameter 'consumer_update' is set
      if @api_client.config.client_side_validation && consumer_update.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_update' when calling ConsumersApi.modify_consumer"
      end
      # resource path
      local_var_path = '/decisioning/v1/consumers/{consumerId}'.sub('{' + 'consumerId' + '}', CGI.escape(consumer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(consumer_update)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['FinicityAppToken', 'FinicityAppKey']

      new_options = opts.merge(
        :operation => :"ConsumersApi.modify_consumer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConsumersApi#modify_consumer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
